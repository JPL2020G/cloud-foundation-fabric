Acquiring state lock. This may take a few moments...

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # google_monitoring_alert_policy.vpn_tunnel_bandwidth[0] will be created
  + resource "google_monitoring_alert_policy" "vpn_tunnel_bandwidth" {
      + combiner              = "OR"
      + creation_record       = (known after apply)
      + display_name          = "VPN Tunnel Bandwidth usage"
      + enabled               = true
      + id                    = (known after apply)
      + name                  = (known after apply)
      + notification_channels = []
      + project               = "jpl-prod-net-landing-0"

      + conditions {
          + display_name = "VPN Tunnel Bandwidth usage"
          + name         = (known after apply)

          + condition_monitoring_query_language {
              + duration = "120s"
              + query    = "fetch vpn_gateway| { metric vpn.googleapis.com/network/sent_bytes_count; metric vpn.googleapis.com/network/received_bytes_count }| align rate (1m)| group_by [metric.tunnel_name]| outer_join 0,0| value val(0) + val(1)| condition val() > 187.5 \"MBy/s\""

              + trigger {
                  + count = 1
                }
            }
        }
    }

  # google_monitoring_alert_policy.vpn_tunnel_established[0] will be created
  + resource "google_monitoring_alert_policy" "vpn_tunnel_established" {
      + combiner              = "OR"
      + creation_record       = (known after apply)
      + display_name          = "VPN Tunnel Established"
      + enabled               = true
      + id                    = (known after apply)
      + name                  = (known after apply)
      + notification_channels = []
      + project               = "jpl-prod-net-landing-0"

      + conditions {
          + display_name = "VPN Tunnel Established"
          + name         = (known after apply)

          + condition_monitoring_query_language {
              + duration = "120s"
              + query    = "fetch vpn_gateway| metric vpn.googleapis.com/tunnel_established| group_by 5m, [value_tunnel_established_max: max(value.tunnel_established)]| every 5m| condition val() < 1 '1'"

              + trigger {
                  + count = 1
                }
            }
        }
    }

  # google_monitoring_dashboard.dashboard["firewall_insights.json"] will be created
  + resource "google_monitoring_dashboard" "dashboard" {
      + dashboard_json = jsonencode(
            {
              + displayName = "Firewall Insights Monitoring"
              + gridLayout  = {
                  + columns = "2"
                  + widgets = [
                      + {
                          + title   = "Subnet Firewall Hit Counts"
                          + xyChart = {
                              + chartOptions      = {
                                  + mode = "COLOR"
                                }
                              + dataSets          = [
                                  + {
                                      + minAlignmentPeriod = "60s"
                                      + plotType           = "LINE"
                                      + targetAxis         = "Y1"
                                      + timeSeriesQuery    = {
                                          + timeSeriesFilter = {
                                              + aggregation          = {
                                                  + perSeriesAligner = "ALIGN_RATE"
                                                }
                                              + filter               = "metric.type=\"firewallinsights.googleapis.com/subnet/firewall_hit_count\" resource.type=\"gce_subnetwork\""
                                              + secondaryAggregation = {}
                                            }
                                          + unitOverride     = "1"
                                        }
                                    },
                                ]
                              + timeshiftDuration = "0s"
                              + yAxis             = {
                                  + label = "y1Axis"
                                  + scale = "LINEAR"
                                }
                            }
                        },
                      + {
                          + title   = "VM Firewall Hit Counts"
                          + xyChart = {
                              + chartOptions      = {
                                  + mode = "COLOR"
                                }
                              + dataSets          = [
                                  + {
                                      + minAlignmentPeriod = "60s"
                                      + plotType           = "LINE"
                                      + targetAxis         = "Y1"
                                      + timeSeriesQuery    = {
                                          + timeSeriesFilter = {
                                              + aggregation          = {
                                                  + perSeriesAligner = "ALIGN_RATE"
                                                }
                                              + filter               = "metric.type=\"firewallinsights.googleapis.com/vm/firewall_hit_count\" resource.type=\"gce_instance\""
                                              + secondaryAggregation = {}
                                            }
                                          + unitOverride     = "1"
                                        }
                                    },
                                ]
                              + timeshiftDuration = "0s"
                              + yAxis             = {
                                  + label = "y1Axis"
                                  + scale = "LINEAR"
                                }
                            }
                        },
                    ]
                }
            }
        )
      + id             = (known after apply)
      + project        = "jpl-prod-net-landing-0"
    }

  # google_monitoring_dashboard.dashboard["vpc_and_vpc_peering_group_quotas.json"] will be created
  + resource "google_monitoring_dashboard" "dashboard" {
      + dashboard_json = jsonencode(
            {
              + dashboardFilters = []
              + displayName      = "VPC & VPC Peering Group Quotas"
              + labels           = {}
              + mosaicLayout     = {
                  + columns = 12
                  + tiles   = [
                      + {
                          + height = 4
                          + widget = {
                              + title   = "Internal network (L4) Load Balancers per VPC Peering Group"
                              + xyChart = {
                                  + chartOptions      = {
                                      + mode = "COLOR"
                                    }
                                  + dataSets          = [
                                      + {
                                          + breakdowns      = []
                                          + dimensions      = []
                                          + measures        = []
                                          + plotType        = "LINE"
                                          + targetAxis      = "Y1"
                                          + timeSeriesQuery = {
                                              + timeSeriesQueryLanguage = <<-EOT
                                                    fetch compute.googleapis.com/VpcNetwork
                                                    |{ metric
                                                          compute.googleapis.com/quota/internal_lb_forwarding_rules_per_peering_group/usage
                                                        | align next_older(1d)
                                                        | group_by [resource.resource_container, metric.limit_name], .max()
                                                      ; metric
                                                          compute.googleapis.com/quota/internal_lb_forwarding_rules_per_peering_group/limit
                                                        | align next_older(1d)
                                                        | group_by [resource.resource_container, metric.limit_name], .min() }
                                                    | ratio
                                                    | value cast_units(val()*100, "%")
                                                EOT
                                              + unitOverride            = ""
                                            }
                                        },
                                    ]
                                  + thresholds        = []
                                  + timeshiftDuration = "0s"
                                  + yAxis             = {
                                      + label = ""
                                      + scale = "LINEAR"
                                    }
                                }
                            }
                          + width  = 6
                          + xPos   = 6
                        },
                      + {
                          + height = 4
                          + widget = {
                              + title   = "Internal network (L4) Load Balancers per VPC"
                              + xyChart = {
                                  + chartOptions      = {
                                      + mode = "COLOR"
                                    }
                                  + dataSets          = [
                                      + {
                                          + plotType        = "LINE"
                                          + targetAxis      = "Y1"
                                          + timeSeriesQuery = {
                                              + timeSeriesQueryLanguage = <<-EOT
                                                    fetch compute.googleapis.com/VpcNetwork
                                                    |{ metric
                                                          compute.googleapis.com/quota/internal_lb_forwarding_rules_per_vpc_network/usage
                                                        | align next_older(1d)
                                                        | group_by [resource.resource_container, metric.limit_name], .max()
                                                      ; metric
                                                          compute.googleapis.com/quota/internal_lb_forwarding_rules_per_vpc_network/limit
                                                        | align next_older(1d)
                                                        | group_by [resource.resource_container, metric.limit_name], .min() }
                                                    | ratio
                                                    | value cast_units(val()*100, "%")
                                                EOT
                                              + unitOverride            = ""
                                            }
                                        },
                                    ]
                                  + thresholds        = []
                                  + timeshiftDuration = "0s"
                                  + yAxis             = {
                                      + label = ""
                                      + scale = "LINEAR"
                                    }
                                }
                            }
                          + width  = 6
                        },
                      + {
                          + height = 4
                          + widget = {
                              + title   = "Internal application (L7) Load Balancers per VPC"
                              + xyChart = {
                                  + chartOptions      = {
                                      + mode = "COLOR"
                                    }
                                  + dataSets          = [
                                      + {
                                          + breakdowns      = []
                                          + dimensions      = []
                                          + measures        = []
                                          + plotType        = "LINE"
                                          + targetAxis      = "Y1"
                                          + timeSeriesQuery = {
                                              + timeSeriesQueryLanguage = <<-EOT
                                                    fetch compute.googleapis.com/VpcNetwork
                                                    |{ metric
                                                          compute.googleapis.com/quota/internal_managed_forwarding_rules_per_vpc_network/usage
                                                        | align next_older(1d)
                                                        | group_by [resource.resource_container, metric.limit_name], .max()
                                                      ; metric
                                                          compute.googleapis.com/quota/internal_managed_forwarding_rules_per_vpc_network/limit
                                                        | align next_older(1d)
                                                        | group_by [resource.resource_container, metric.limit_name], .min() }
                                                    | ratio
                                                    | value cast_units(val()*100, "%")
                                                EOT
                                              + unitOverride            = ""
                                            }
                                        },
                                    ]
                                  + thresholds        = []
                                  + timeshiftDuration = "0s"
                                  + yAxis             = {
                                      + label = ""
                                      + scale = "LINEAR"
                                    }
                                }
                            }
                          + width  = 6
                          + yPos   = 4
                        },
                      + {
                          + height = 4
                          + widget = {
                              + title   = "Internal application (L7) Load Balancers per VPC Peering Group"
                              + xyChart = {
                                  + chartOptions      = {
                                      + mode = "COLOR"
                                    }
                                  + dataSets          = [
                                      + {
                                          + breakdowns      = []
                                          + dimensions      = []
                                          + measures        = []
                                          + plotType        = "LINE"
                                          + targetAxis      = "Y1"
                                          + timeSeriesQuery = {
                                              + timeSeriesQueryLanguage = <<-EOT
                                                    fetch compute.googleapis.com/VpcNetwork
                                                    |{ metric
                                                          compute.googleapis.com/quota/internal_managed_forwarding_rules_per_peering_group/usage
                                                        | align next_older(1d)
                                                        | group_by [resource.resource_container, metric.limit_name], .max()
                                                      ; metric
                                                          compute.googleapis.com/quota/internal_managed_forwarding_rules_per_peering_group/limit
                                                        | align next_older(1d)
                                                        | group_by [resource.resource_container, metric.limit_name], .min() }
                                                    | ratio
                                                    | value cast_units(val()*100, "%")
                                                EOT
                                              + unitOverride            = ""
                                            }
                                        },
                                    ]
                                  + thresholds        = []
                                  + timeshiftDuration = "0s"
                                  + yAxis             = {
                                      + label = ""
                                      + scale = "LINEAR"
                                    }
                                }
                            }
                          + width  = 6
                          + xPos   = 6
                          + yPos   = 4
                        },
                      + {
                          + height = 4
                          + widget = {
                              + title   = "Instances per VPC"
                              + xyChart = {
                                  + chartOptions      = {
                                      + mode = "COLOR"
                                    }
                                  + dataSets          = [
                                      + {
                                          + plotType        = "LINE"
                                          + targetAxis      = "Y1"
                                          + timeSeriesQuery = {
                                              + timeSeriesQueryLanguage = <<-EOT
                                                    fetch compute.googleapis.com/VpcNetwork
                                                    |{ metric
                                                          compute.googleapis.com/quota/instances_per_vpc_network/usage
                                                        | align next_older(1d)
                                                        | group_by [resource.resource_container, metric.limit_name], .max()
                                                      ; metric
                                                          compute.googleapis.com/quota/instances_per_vpc_network/limit
                                                        | align next_older(1d)
                                                        | group_by [resource.resource_container, metric.limit_name], .min() }
                                                    | ratio
                                                    | value cast_units(val()*100, "%")
                                                EOT
                                              + unitOverride            = ""
                                            }
                                        },
                                    ]
                                  + thresholds        = []
                                  + timeshiftDuration = "0s"
                                  + yAxis             = {
                                      + label = ""
                                      + scale = "LINEAR"
                                    }
                                }
                            }
                          + width  = 6
                          + yPos   = 8
                        },
                      + {
                          + height = 4
                          + widget = {
                              + title   = "Instances per VPC Peering Group"
                              + xyChart = {
                                  + chartOptions      = {
                                      + mode = "COLOR"
                                    }
                                  + dataSets          = [
                                      + {
                                          + plotType        = "LINE"
                                          + targetAxis      = "Y1"
                                          + timeSeriesQuery = {
                                              + timeSeriesQueryLanguage = <<-EOT
                                                    fetch compute.googleapis.com/VpcNetwork
                                                    |{ metric
                                                          compute.googleapis.com/quota/instances_per_peering_group/usage
                                                        | align next_older(1d)
                                                        | group_by [resource.resource_container, metric.limit_name], .max()
                                                      ; metric
                                                          compute.googleapis.com/quota/instances_per_peering_group/limit
                                                        | align next_older(1d)
                                                        | group_by [resource.resource_container, metric.limit_name], .min() }
                                                    | ratio
                                                    | value cast_units(val()*100, "%")
                                                EOT
                                              + unitOverride            = ""
                                            }
                                        },
                                    ]
                                  + thresholds        = []
                                  + timeshiftDuration = "0s"
                                  + yAxis             = {
                                      + label = ""
                                      + scale = "LINEAR"
                                    }
                                }
                            }
                          + width  = 6
                          + xPos   = 6
                          + yPos   = 8
                        },
                      + {
                          + height = 4
                          + widget = {
                              + title   = "Subnet ranges per VPC"
                              + xyChart = {
                                  + chartOptions      = {
                                      + mode = "COLOR"
                                    }
                                  + dataSets          = [
                                      + {
                                          + plotType        = "LINE"
                                          + targetAxis      = "Y1"
                                          + timeSeriesQuery = {
                                              + timeSeriesQueryLanguage = <<-EOT
                                                    fetch compute.googleapis.com/VpcNetwork
                                                    |{ metric
                                                          compute.googleapis.com/quota/subnet_ranges_per_vpc_network/usage
                                                        | align next_older(1d)
                                                        | group_by [resource.resource_container, metric.limit_name], .max()
                                                      ; metric
                                                          compute.googleapis.com/quota/subnet_ranges_per_vpc_network/limit
                                                        | align next_older(1d)
                                                        | group_by [resource.resource_container, metric.limit_name], .min() }
                                                    | ratio
                                                    | value cast_units(val()*100, "%")
                                                EOT
                                              + unitOverride            = ""
                                            }
                                        },
                                    ]
                                  + thresholds        = []
                                  + timeshiftDuration = "0s"
                                  + yAxis             = {
                                      + label = ""
                                      + scale = "LINEAR"
                                    }
                                }
                            }
                          + width  = 6
                          + yPos   = 12
                        },
                      + {
                          + height = 4
                          + widget = {
                              + title   = "Subnet ranges per VPC Peering Group"
                              + xyChart = {
                                  + chartOptions      = {
                                      + mode = "COLOR"
                                    }
                                  + dataSets          = [
                                      + {
                                          + plotType        = "LINE"
                                          + targetAxis      = "Y1"
                                          + timeSeriesQuery = {
                                              + timeSeriesQueryLanguage = <<-EOT
                                                    fetch compute.googleapis.com/VpcNetwork
                                                    |{ metric
                                                          compute.googleapis.com/quota/subnet_ranges_per_peering_group/usage
                                                        | align next_older(1d)
                                                        | group_by [resource.resource_container, metric.limit_name], .max()
                                                      ; metric
                                                          compute.googleapis.com/quota/subnet_ranges_per_peering_group/limit
                                                        | align next_older(1d)
                                                        | group_by [resource.resource_container, metric.limit_name], .min() }
                                                    | ratio
                                                    | value cast_units(val()*100, "%")
                                                EOT
                                              + unitOverride            = ""
                                            }
                                        },
                                    ]
                                  + thresholds        = []
                                  + timeshiftDuration = "0s"
                                  + yAxis             = {
                                      + label = ""
                                      + scale = "LINEAR"
                                    }
                                }
                            }
                          + width  = 6
                          + xPos   = 6
                          + yPos   = 12
                        },
                    ]
                }
            }
        )
      + id             = (known after apply)
      + project        = "jpl-prod-net-landing-0"
    }

  # google_monitoring_dashboard.dashboard["vpn.json"] will be created
  + resource "google_monitoring_dashboard" "dashboard" {
      + dashboard_json = jsonencode(
            {
              + displayName  = "VPN Monitoring"
              + mosaicLayout = {
                  + columns = 12
                  + tiles   = [
                      + {
                          + height = 4
                          + widget = {
                              + title   = "Number of connections"
                              + xyChart = {
                                  + chartOptions      = {
                                      + mode = "COLOR"
                                    }
                                  + dataSets          = [
                                      + {
                                          + minAlignmentPeriod = "60s"
                                          + plotType           = "LINE"
                                          + targetAxis         = "Y1"
                                          + timeSeriesQuery    = {
                                              + timeSeriesFilter = {
                                                  + aggregation          = {
                                                      + perSeriesAligner = "ALIGN_MEAN"
                                                    }
                                                  + filter               = "metric.type=\"vpn.googleapis.com/gateway/connections\" resource.type=\"vpn_gateway\""
                                                  + secondaryAggregation = {}
                                                }
                                              + unitOverride     = "1"
                                            }
                                        },
                                    ]
                                  + timeshiftDuration = "0s"
                                  + yAxis             = {
                                      + label = "y1Axis"
                                      + scale = "LINEAR"
                                    }
                                }
                            }
                          + width  = 4
                        },
                      + {
                          + height = 4
                          + widget = {
                              + title   = "Tunnel established"
                              + xyChart = {
                                  + chartOptions      = {
                                      + mode = "COLOR"
                                    }
                                  + dataSets          = [
                                      + {
                                          + minAlignmentPeriod = "60s"
                                          + plotType           = "LINE"
                                          + targetAxis         = "Y1"
                                          + timeSeriesQuery    = {
                                              + timeSeriesFilter = {
                                                  + aggregation          = {
                                                      + perSeriesAligner = "ALIGN_MEAN"
                                                    }
                                                  + filter               = "metric.type=\"vpn.googleapis.com/tunnel_established\" resource.type=\"vpn_gateway\""
                                                  + secondaryAggregation = {}
                                                }
                                              + unitOverride     = "1"
                                            }
                                        },
                                    ]
                                  + timeshiftDuration = "0s"
                                  + yAxis             = {
                                      + label = "y1Axis"
                                      + scale = "LINEAR"
                                    }
                                }
                            }
                          + width  = 4
                          + xPos   = 4
                        },
                      + {
                          + height = 4
                          + widget = {
                              + title   = "VPN Tunnel Bandwidth usage"
                              + xyChart = {
                                  + chartOptions      = {
                                      + mode = "COLOR"
                                    }
                                  + dataSets          = [
                                      + {
                                          + plotType        = "LINE"
                                          + targetAxis      = "Y1"
                                          + timeSeriesQuery = {
                                              + timeSeriesQueryLanguage = "fetch vpn_gateway| { metric vpn.googleapis.com/network/sent_bytes_count; metric vpn.googleapis.com/network/received_bytes_count }| align rate (1m)| group_by [metric.tunnel_name]| outer_join 0,0| value val(0) + val(1)| condition val() > 187.5 \"MBy/s\""
                                            }
                                        },
                                    ]
                                  + thresholds        = [
                                      + {
                                          + targetAxis = "Y1"
                                          + value      = 187500000
                                        },
                                    ]
                                  + timeshiftDuration = "0s"
                                  + yAxis             = {
                                      + scale = "LINEAR"
                                    }
                                }
                            }
                          + width  = 4
                          + xPos   = 8
                        },
                      + {
                          + height = 4
                          + widget = {
                              + title   = "Cloud VPN Gateway - Received bytes"
                              + xyChart = {
                                  + chartOptions      = {
                                      + mode = "COLOR"
                                    }
                                  + dataSets          = [
                                      + {
                                          + minAlignmentPeriod = "60s"
                                          + plotType           = "LINE"
                                          + targetAxis         = "Y1"
                                          + timeSeriesQuery    = {
                                              + timeSeriesFilter = {
                                                  + aggregation          = {
                                                      + perSeriesAligner = "ALIGN_RATE"
                                                    }
                                                  + filter               = "metric.type=\"vpn.googleapis.com/network/received_bytes_count\" resource.type=\"vpn_gateway\""
                                                  + secondaryAggregation = {}
                                                }
                                              + unitOverride     = "By"
                                            }
                                        },
                                    ]
                                  + timeshiftDuration = "0s"
                                  + yAxis             = {
                                      + label = "y1Axis"
                                      + scale = "LINEAR"
                                    }
                                }
                            }
                          + width  = 6
                          + yPos   = 4
                        },
                      + {
                          + height = 4
                          + widget = {
                              + title   = "Cloud VPN Gateway - Sent bytes"
                              + xyChart = {
                                  + chartOptions      = {
                                      + mode = "COLOR"
                                    }
                                  + dataSets          = [
                                      + {
                                          + minAlignmentPeriod = "60s"
                                          + plotType           = "LINE"
                                          + targetAxis         = "Y1"
                                          + timeSeriesQuery    = {
                                              + timeSeriesFilter = {
                                                  + aggregation          = {
                                                      + perSeriesAligner = "ALIGN_RATE"
                                                    }
                                                  + filter               = "metric.type=\"vpn.googleapis.com/network/sent_bytes_count\" resource.type=\"vpn_gateway\""
                                                  + secondaryAggregation = {}
                                                }
                                              + unitOverride     = "By"
                                            }
                                        },
                                    ]
                                  + timeshiftDuration = "0s"
                                  + yAxis             = {
                                      + label = "y1Axis"
                                      + scale = "LINEAR"
                                    }
                                }
                            }
                          + width  = 6
                          + xPos   = 6
                          + yPos   = 4
                        },
                      + {
                          + height = 4
                          + widget = {
                              + title   = "Cloud VPN Gateway - Received packets"
                              + xyChart = {
                                  + chartOptions      = {
                                      + mode = "COLOR"
                                    }
                                  + dataSets          = [
                                      + {
                                          + minAlignmentPeriod = "60s"
                                          + plotType           = "LINE"
                                          + targetAxis         = "Y1"
                                          + timeSeriesQuery    = {
                                              + timeSeriesFilter = {
                                                  + aggregation          = {
                                                      + perSeriesAligner = "ALIGN_RATE"
                                                    }
                                                  + filter               = "metric.type=\"vpn.googleapis.com/network/received_packets_count\" resource.type=\"vpn_gateway\""
                                                  + secondaryAggregation = {}
                                                }
                                              + unitOverride     = "{packets}"
                                            }
                                        },
                                    ]
                                  + timeshiftDuration = "0s"
                                  + yAxis             = {
                                      + label = "y1Axis"
                                      + scale = "LINEAR"
                                    }
                                }
                            }
                          + width  = 6
                          + yPos   = 8
                        },
                      + {
                          + height = 4
                          + widget = {
                              + title   = "Cloud VPN Gateway - Sent packets"
                              + xyChart = {
                                  + chartOptions      = {
                                      + mode = "COLOR"
                                    }
                                  + dataSets          = [
                                      + {
                                          + minAlignmentPeriod = "60s"
                                          + plotType           = "LINE"
                                          + targetAxis         = "Y1"
                                          + timeSeriesQuery    = {
                                              + timeSeriesFilter = {
                                                  + aggregation          = {
                                                      + perSeriesAligner = "ALIGN_RATE"
                                                    }
                                                  + filter               = "metric.type=\"vpn.googleapis.com/network/sent_packets_count\" resource.type=\"vpn_gateway\""
                                                  + secondaryAggregation = {}
                                                }
                                              + unitOverride     = "{packets}"
                                            }
                                        },
                                    ]
                                  + timeshiftDuration = "0s"
                                  + yAxis             = {
                                      + label = "y1Axis"
                                      + scale = "LINEAR"
                                    }
                                }
                            }
                          + width  = 6
                          + xPos   = 6
                          + yPos   = 8
                        },
                      + {
                          + height = 4
                          + widget = {
                              + title   = "Incoming packets dropped"
                              + xyChart = {
                                  + chartOptions      = {
                                      + mode = "COLOR"
                                    }
                                  + dataSets          = [
                                      + {
                                          + minAlignmentPeriod = "60s"
                                          + plotType           = "LINE"
                                          + targetAxis         = "Y1"
                                          + timeSeriesQuery    = {
                                              + timeSeriesFilter = {
                                                  + aggregation          = {
                                                      + perSeriesAligner = "ALIGN_RATE"
                                                    }
                                                  + filter               = "metric.type=\"vpn.googleapis.com/network/dropped_received_packets_count\" resource.type=\"vpn_gateway\""
                                                  + secondaryAggregation = {}
                                                }
                                              + unitOverride     = "1"
                                            }
                                        },
                                    ]
                                  + timeshiftDuration = "0s"
                                  + yAxis             = {
                                      + label = "y1Axis"
                                      + scale = "LINEAR"
                                    }
                                }
                            }
                          + width  = 6
                          + xPos   = 6
                          + yPos   = 12
                        },
                      + {
                          + height = 4
                          + widget = {
                              + title   = "Outgoing packets dropped"
                              + xyChart = {
                                  + chartOptions      = {
                                      + mode = "COLOR"
                                    }
                                  + dataSets          = [
                                      + {
                                          + minAlignmentPeriod = "60s"
                                          + plotType           = "LINE"
                                          + targetAxis         = "Y1"
                                          + timeSeriesQuery    = {
                                              + timeSeriesFilter = {
                                                  + aggregation          = {
                                                      + perSeriesAligner = "ALIGN_RATE"
                                                    }
                                                  + filter               = "metric.type=\"vpn.googleapis.com/network/dropped_sent_packets_count\" resource.type=\"vpn_gateway\""
                                                  + secondaryAggregation = {}
                                                }
                                              + unitOverride     = "1"
                                            }
                                        },
                                    ]
                                  + timeshiftDuration = "0s"
                                  + yAxis             = {
                                      + label = "y1Axis"
                                      + scale = "LINEAR"
                                    }
                                }
                            }
                          + width  = 6
                          + yPos   = 12
                        },
                    ]
                }
            }
        )
      + id             = (known after apply)
      + project        = "jpl-prod-net-landing-0"
    }

  # google_storage_bucket_object.tfvars will be created
  + resource "google_storage_bucket_object" "tfvars" {
      + bucket         = "jpl-prod-iac-core-outputs-0"
      + content        = (sensitive value)
      + content_type   = (known after apply)
      + crc32c         = (known after apply)
      + detect_md5hash = "different hash"
      + generation     = (known after apply)
      + id             = (known after apply)
      + kms_key_name   = (known after apply)
      + md5hash        = (known after apply)
      + md5hexhash     = (known after apply)
      + media_link     = (known after apply)
      + name           = "tfvars/2-networking.auto.tfvars.json"
      + output_name    = (known after apply)
      + self_link      = (known after apply)
      + storage_class  = (known after apply)
    }

  # module.dev-dns-peer-landing-rev-10.google_dns_managed_zone.dns_managed_zone[0] will be created
  + resource "google_dns_managed_zone" "dns_managed_zone" {
      + creation_time    = (known after apply)
      + description      = "Terraform managed."
      + dns_name         = "10.in-addr.arpa."
      + effective_labels = {
          + "goog-terraform-provisioned" = "true"
        }
      + force_destroy    = false
      + id               = (known after apply)
      + managed_zone_id  = (known after apply)
      + name             = "dev-reverse-10-dns-peering"
      + name_servers     = (known after apply)
      + project          = "jpl-dev-net-spoke-0"
      + reverse_lookup   = false
      + terraform_labels = {
          + "goog-terraform-provisioned" = "true"
        }
      + visibility       = "private"

      + cloud_logging_config {
          + enable_logging = false
        }

      + dnssec_config (known after apply)

      + peering_config (known after apply)

      + private_visibility_config (known after apply)
    }

  # module.dev-dns-peer-landing-root.google_dns_managed_zone.dns_managed_zone[0] will be created
  + resource "google_dns_managed_zone" "dns_managed_zone" {
      + creation_time    = (known after apply)
      + description      = "Terraform managed."
      + dns_name         = "."
      + effective_labels = {
          + "goog-terraform-provisioned" = "true"
        }
      + force_destroy    = false
      + id               = (known after apply)
      + managed_zone_id  = (known after apply)
      + name             = "dev-root-dns-peering"
      + name_servers     = (known after apply)
      + project          = "jpl-dev-net-spoke-0"
      + reverse_lookup   = false
      + terraform_labels = {
          + "goog-terraform-provisioned" = "true"
        }
      + visibility       = "private"

      + cloud_logging_config {
          + enable_logging = false
        }

      + dnssec_config (known after apply)

      + peering_config (known after apply)

      + private_visibility_config (known after apply)
    }

  # module.dev-dns-priv-example.google_dns_managed_zone.dns_managed_zone[0] will be created
  + resource "google_dns_managed_zone" "dns_managed_zone" {
      + creation_time    = (known after apply)
      + description      = "Terraform managed."
      + dns_name         = "dev.gcp.example.com."
      + effective_labels = {
          + "goog-terraform-provisioned" = "true"
        }
      + force_destroy    = false
      + id               = (known after apply)
      + managed_zone_id  = (known after apply)
      + name             = "dev-gcp-example-com"
      + name_servers     = (known after apply)
      + project          = "jpl-dev-net-spoke-0"
      + reverse_lookup   = false
      + terraform_labels = {
          + "goog-terraform-provisioned" = "true"
        }
      + visibility       = "private"

      + cloud_logging_config {
          + enable_logging = false
        }

      + dnssec_config (known after apply)

      + private_visibility_config (known after apply)
    }

  # module.dev-dns-priv-example.google_dns_record_set.dns_record_set["A localhost"] will be created
  + resource "google_dns_record_set" "dns_record_set" {
      + id           = (known after apply)
      + managed_zone = "dev-gcp-example-com"
      + name         = "localhost.dev.gcp.example.com."
      + project      = "jpl-dev-net-spoke-0"
      + rrdatas      = [
          + "127.0.0.1",
        ]
      + ttl          = 300
      + type         = "A"
    }

  # module.dev-spoke-firewall[0].google_compute_firewall.custom-rules["ingress-allow-composer-nodes"] will be created
  + resource "google_compute_firewall" "custom-rules" {
      + creation_timestamp = (known after apply)
      + description        = "Allow traffic to Composer nodes."
      + destination_ranges = (known after apply)
      + direction          = "INGRESS"
      + disabled           = false
      + enable_logging     = (known after apply)
      + id                 = (known after apply)
      + name               = "ingress-allow-composer-nodes"
      + network            = "dev-spoke-0"
      + priority           = 1000
      + project            = "jpl-dev-net-spoke-0"
      + self_link          = (known after apply)
      + source_tags        = [
          + "composer-worker",
        ]
      + target_tags        = [
          + "composer-worker",
        ]

      + allow {
          + ports    = [
              + "80",
              + "443",
              + "3306",
              + "3307",
            ]
          + protocol = "tcp"
        }
    }

  # module.dev-spoke-firewall[0].google_compute_firewall.custom-rules["ingress-allow-dataflow-load"] will be created
  + resource "google_compute_firewall" "custom-rules" {
      + creation_timestamp = (known after apply)
      + description        = "Allow traffic to Dataflow nodes."
      + destination_ranges = (known after apply)
      + direction          = "INGRESS"
      + disabled           = false
      + enable_logging     = (known after apply)
      + id                 = (known after apply)
      + name               = "ingress-allow-dataflow-load"
      + network            = "dev-spoke-0"
      + priority           = 1000
      + project            = "jpl-dev-net-spoke-0"
      + self_link          = (known after apply)
      + source_tags        = [
          + "dataflow",
        ]
      + target_tags        = [
          + "dataflow",
        ]

      + allow {
          + ports    = [
              + "12345",
              + "12346",
            ]
          + protocol = "tcp"
        }
    }

  # module.dev-spoke-firewall[0].google_compute_firewall.custom-rules["ingress-default-deny"] will be created
  + resource "google_compute_firewall" "custom-rules" {
      + creation_timestamp = (known after apply)
      + description        = "Deny and log any unmatched ingress traffic."
      + destination_ranges = (known after apply)
      + direction          = "INGRESS"
      + disabled           = false
      + enable_logging     = (known after apply)
      + id                 = (known after apply)
      + name               = "ingress-default-deny"
      + network            = "dev-spoke-0"
      + priority           = 65535
      + project            = "jpl-dev-net-spoke-0"
      + self_link          = (known after apply)
      + source_ranges      = [
          + "0.0.0.0/0",
        ]

      + deny {
          + ports    = []
          + protocol = "all"
        }

      + log_config {
          + metadata = "EXCLUDE_ALL_METADATA"
        }
    }

  # module.dev-spoke-project.google_compute_shared_vpc_host_project.shared_vpc_host[0] will be created
  + resource "google_compute_shared_vpc_host_project" "shared_vpc_host" {
      + id      = (known after apply)
      + project = "jpl-dev-net-spoke-0"
    }

  # module.dev-spoke-project.google_monitoring_monitored_project.primary["jpl-prod-net-landing-0"] will be created
  + resource "google_monitoring_monitored_project" "primary" {
      + create_time   = (known after apply)
      + id            = (known after apply)
      + metrics_scope = "jpl-prod-net-landing-0"
      + name          = "jpl-dev-net-spoke-0"
    }

  # module.dev-spoke-project.google_project.project[0] will be created
  + resource "google_project" "project" {
      + auto_create_network = false
      + billing_account     = "0189FA-E139FD-136A58"
      + deletion_policy     = "DELETE"
      + effective_labels    = {
          + "goog-terraform-provisioned" = "true"
        }
      + folder_id           = "260455359833"
      + id                  = (known after apply)
      + name                = "jpl-dev-net-spoke-0"
      + number              = (known after apply)
      + project_id          = "jpl-dev-net-spoke-0"
      + terraform_labels    = {
          + "goog-terraform-provisioned" = "true"
        }
    }

  # module.dev-spoke-project.google_project_iam_binding.authoritative["organizations/890114964408/roles/projectIamViewer"] will be created
  + resource "google_project_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + project = "jpl-dev-net-spoke-0"
      + role    = "organizations/890114964408/roles/projectIamViewer"
    }

  # module.dev-spoke-project.google_project_iam_member.service_agents["compute-system"] will be created
  + resource "google_project_iam_member" "service_agents" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-dev-net-spoke-0"
      + role    = "roles/compute.serviceAgent"
    }

  # module.dev-spoke-project.google_project_iam_member.service_agents["container-engine-robot"] will be created
  + resource "google_project_iam_member" "service_agents" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-dev-net-spoke-0"
      + role    = "roles/container.serviceAgent"
    }

  # module.dev-spoke-project.google_project_iam_member.service_agents["dns"] will be created
  + resource "google_project_iam_member" "service_agents" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-dev-net-spoke-0"
      + role    = "roles/dns.serviceAgent"
    }

  # module.dev-spoke-project.google_project_iam_member.service_agents["gkenode"] will be created
  + resource "google_project_iam_member" "service_agents" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-dev-net-spoke-0"
      + role    = "roles/container.defaultNodeServiceAgent"
    }

  # module.dev-spoke-project.google_project_iam_member.service_agents["networkmanagement"] will be created
  + resource "google_project_iam_member" "service_agents" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-dev-net-spoke-0"
      + role    = "roles/networkmanagement.serviceAgent"
    }

  # module.dev-spoke-project.google_project_iam_member.service_agents["service-networking"] will be created
  + resource "google_project_iam_member" "service_agents" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-dev-net-spoke-0"
      + role    = "roles/servicenetworking.serviceAgent"
    }

  # module.dev-spoke-project.google_project_iam_member.service_agents["vmwareengine"] will be created
  + resource "google_project_iam_member" "service_agents" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-dev-net-spoke-0"
      + role    = "roles/vmwareengine.serviceAgent"
    }

  # module.dev-spoke-project.google_project_iam_member.service_agents["vpcaccess"] will be created
  + resource "google_project_iam_member" "service_agents" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-dev-net-spoke-0"
      + role    = "roles/vpcaccess.serviceAgent"
    }

  # module.dev-spoke-project.google_project_service.project_services["compute.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-dev-net-spoke-0"
      + service                    = "compute.googleapis.com"
    }

  # module.dev-spoke-project.google_project_service.project_services["container.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-dev-net-spoke-0"
      + service                    = "container.googleapis.com"
    }

  # module.dev-spoke-project.google_project_service.project_services["dns.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-dev-net-spoke-0"
      + service                    = "dns.googleapis.com"
    }

  # module.dev-spoke-project.google_project_service.project_services["iap.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-dev-net-spoke-0"
      + service                    = "iap.googleapis.com"
    }

  # module.dev-spoke-project.google_project_service.project_services["networkmanagement.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-dev-net-spoke-0"
      + service                    = "networkmanagement.googleapis.com"
    }

  # module.dev-spoke-project.google_project_service.project_services["networksecurity.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-dev-net-spoke-0"
      + service                    = "networksecurity.googleapis.com"
    }

  # module.dev-spoke-project.google_project_service.project_services["servicenetworking.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-dev-net-spoke-0"
      + service                    = "servicenetworking.googleapis.com"
    }

  # module.dev-spoke-project.google_project_service.project_services["stackdriver.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-dev-net-spoke-0"
      + service                    = "stackdriver.googleapis.com"
    }

  # module.dev-spoke-project.google_project_service.project_services["vmwareengine.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-dev-net-spoke-0"
      + service                    = "vmwareengine.googleapis.com"
    }

  # module.dev-spoke-project.google_project_service.project_services["vpcaccess.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-dev-net-spoke-0"
      + service                    = "vpcaccess.googleapis.com"
    }

  # module.dev-spoke-project.google_project_service_identity.default["container.googleapis.com"] will be created
  + resource "google_project_service_identity" "default" {
      + email   = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-dev-net-spoke-0"
      + service = "container.googleapis.com"
    }

  # module.dev-spoke-project.google_project_service_identity.default["dns.googleapis.com"] will be created
  + resource "google_project_service_identity" "default" {
      + email   = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-dev-net-spoke-0"
      + service = "dns.googleapis.com"
    }

  # module.dev-spoke-project.google_project_service_identity.default["iap.googleapis.com"] will be created
  + resource "google_project_service_identity" "default" {
      + email   = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-dev-net-spoke-0"
      + service = "iap.googleapis.com"
    }

  # module.dev-spoke-project.google_project_service_identity.default["networkmanagement.googleapis.com"] will be created
  + resource "google_project_service_identity" "default" {
      + email   = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-dev-net-spoke-0"
      + service = "networkmanagement.googleapis.com"
    }

  # module.dev-spoke-project.google_project_service_identity.default["networksecurity.googleapis.com"] will be created
  + resource "google_project_service_identity" "default" {
      + email   = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-dev-net-spoke-0"
      + service = "networksecurity.googleapis.com"
    }

  # module.dev-spoke-project.google_project_service_identity.default["servicenetworking.googleapis.com"] will be created
  + resource "google_project_service_identity" "default" {
      + email   = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-dev-net-spoke-0"
      + service = "servicenetworking.googleapis.com"
    }

  # module.dev-spoke-project.google_project_service_identity.default["vmwareengine.googleapis.com"] will be created
  + resource "google_project_service_identity" "default" {
      + email   = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-dev-net-spoke-0"
      + service = "vmwareengine.googleapis.com"
    }

  # module.dev-spoke-project.google_project_service_identity.default["vpcaccess.googleapis.com"] will be created
  + resource "google_project_service_identity" "default" {
      + email   = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-dev-net-spoke-0"
      + service = "vpcaccess.googleapis.com"
    }

  # module.dev-spoke-project.google_tags_tag_binding.binding["environment"] will be created
  + resource "google_tags_tag_binding" "binding" {
      + id        = (known after apply)
      + name      = (known after apply)
      + parent    = (known after apply)
      + tag_value = "tagValues/281480043455573"
    }

  # module.dev-spoke-vpc.google_compute_network.network[0] will be created
  + resource "google_compute_network" "network" {
      + auto_create_subnetworks                   = false
      + bgp_always_compare_med                    = (known after apply)
      + bgp_best_path_selection_mode              = (known after apply)
      + bgp_inter_region_cost                     = (known after apply)
      + delete_default_routes_on_create           = true
      + description                               = "Terraform-managed."
      + gateway_ipv4                              = (known after apply)
      + id                                        = (known after apply)
      + internal_ipv6_range                       = (known after apply)
      + mtu                                       = 1500
      + name                                      = "dev-spoke-0"
      + network_firewall_policy_enforcement_order = "AFTER_CLASSIC_FIREWALL"
      + network_id                                = (known after apply)
      + numeric_id                                = (known after apply)
      + project                                   = "jpl-dev-net-spoke-0"
      + routing_mode                              = "GLOBAL"
      + self_link                                 = (known after apply)
    }

  # module.dev-spoke-vpc.google_compute_route.gateway["default"] will be created
  + resource "google_compute_route" "gateway" {
      + as_paths                   = (known after apply)
      + creation_timestamp         = (known after apply)
      + description                = "Terraform-managed."
      + dest_range                 = "0.0.0.0/0"
      + id                         = (known after apply)
      + name                       = "dev-spoke-0-default"
      + network                    = "dev-spoke-0"
      + next_hop_gateway           = "default-internet-gateway"
      + next_hop_hub               = (known after apply)
      + next_hop_instance_zone     = (known after apply)
      + next_hop_inter_region_cost = (known after apply)
      + next_hop_ip                = (known after apply)
      + next_hop_med               = (known after apply)
      + next_hop_network           = (known after apply)
      + next_hop_origin            = (known after apply)
      + next_hop_peering           = (known after apply)
      + priority                   = 1000
      + project                    = "jpl-dev-net-spoke-0"
      + route_status               = (known after apply)
      + route_type                 = (known after apply)
      + self_link                  = (known after apply)
      + warnings                   = (known after apply)
    }

  # module.dev-spoke-vpc.google_compute_route.gateway["directpath-googleapis"] will be created
  + resource "google_compute_route" "gateway" {
      + as_paths                   = (known after apply)
      + creation_timestamp         = (known after apply)
      + description                = "Terraform-managed."
      + dest_range                 = "34.126.0.0/18"
      + id                         = (known after apply)
      + name                       = "dev-spoke-0-directpath-googleapis"
      + network                    = "dev-spoke-0"
      + next_hop_gateway           = "default-internet-gateway"
      + next_hop_hub               = (known after apply)
      + next_hop_instance_zone     = (known after apply)
      + next_hop_inter_region_cost = (known after apply)
      + next_hop_ip                = (known after apply)
      + next_hop_med               = (known after apply)
      + next_hop_network           = (known after apply)
      + next_hop_origin            = (known after apply)
      + next_hop_peering           = (known after apply)
      + priority                   = 1000
      + project                    = "jpl-dev-net-spoke-0"
      + route_status               = (known after apply)
      + route_type                 = (known after apply)
      + self_link                  = (known after apply)
      + warnings                   = (known after apply)
    }

  # module.dev-spoke-vpc.google_compute_route.gateway["private-googleapis"] will be created
  + resource "google_compute_route" "gateway" {
      + as_paths                   = (known after apply)
      + creation_timestamp         = (known after apply)
      + description                = "Terraform-managed."
      + dest_range                 = "199.36.153.8/30"
      + id                         = (known after apply)
      + name                       = "dev-spoke-0-private-googleapis"
      + network                    = "dev-spoke-0"
      + next_hop_gateway           = "default-internet-gateway"
      + next_hop_hub               = (known after apply)
      + next_hop_instance_zone     = (known after apply)
      + next_hop_inter_region_cost = (known after apply)
      + next_hop_ip                = (known after apply)
      + next_hop_med               = (known after apply)
      + next_hop_network           = (known after apply)
      + next_hop_origin            = (known after apply)
      + next_hop_peering           = (known after apply)
      + priority                   = 1000
      + project                    = "jpl-dev-net-spoke-0"
      + route_status               = (known after apply)
      + route_type                 = (known after apply)
      + self_link                  = (known after apply)
      + warnings                   = (known after apply)
    }

  # module.dev-spoke-vpc.google_compute_route.gateway["restricted-googleapis"] will be created
  + resource "google_compute_route" "gateway" {
      + as_paths                   = (known after apply)
      + creation_timestamp         = (known after apply)
      + description                = "Terraform-managed."
      + dest_range                 = "199.36.153.4/30"
      + id                         = (known after apply)
      + name                       = "dev-spoke-0-restricted-googleapis"
      + network                    = "dev-spoke-0"
      + next_hop_gateway           = "default-internet-gateway"
      + next_hop_hub               = (known after apply)
      + next_hop_instance_zone     = (known after apply)
      + next_hop_inter_region_cost = (known after apply)
      + next_hop_ip                = (known after apply)
      + next_hop_med               = (known after apply)
      + next_hop_network           = (known after apply)
      + next_hop_origin            = (known after apply)
      + next_hop_peering           = (known after apply)
      + priority                   = 1000
      + project                    = "jpl-dev-net-spoke-0"
      + route_status               = (known after apply)
      + route_type                 = (known after apply)
      + self_link                  = (known after apply)
      + warnings                   = (known after apply)
    }

  # module.dev-spoke-vpc.google_compute_subnetwork.subnetwork["southamerica-east1/rd-gcp-dev-net-spoke-0"] will be created
  + resource "google_compute_subnetwork" "subnetwork" {
      + allow_subnet_cidr_routes_overlap = (known after apply)
      + creation_timestamp               = (known after apply)
      + description                      = "Default primary-region subnet for dev"
      + enable_flow_logs                 = (known after apply)
      + external_ipv6_prefix             = (known after apply)
      + fingerprint                      = (known after apply)
      + gateway_address                  = (known after apply)
      + id                               = (known after apply)
      + internal_ipv6_prefix             = (known after apply)
      + ip_cidr_range                    = "10.239.192.0/19"
      + ipv6_cidr_range                  = (known after apply)
      + ipv6_gce_endpoint                = (known after apply)
      + name                             = "rd-gcp-dev-net-spoke-0"
      + network                          = "dev-spoke-0"
      + private_ip_google_access         = true
      + private_ipv6_google_access       = (known after apply)
      + project                          = "jpl-dev-net-spoke-0"
      + purpose                          = (known after apply)
      + region                           = "southamerica-east1"
      + self_link                        = (known after apply)
      + send_secondary_ip_range_if_empty = true
      + stack_type                       = (known after apply)
      + state                            = (known after apply)
      + subnetwork_id                    = (known after apply)

      + secondary_ip_range (known after apply)
    }

  # module.dev-spoke-vpc.google_dns_policy.default[0] will be created
  + resource "google_dns_policy" "default" {
      + description               = "Managed by Terraform"
      + enable_inbound_forwarding = true
      + enable_logging            = true
      + id                        = (known after apply)
      + name                      = "dev-spoke-0"
      + project                   = "jpl-dev-net-spoke-0"

      + networks {
          + network_url = (known after apply)
        }
    }

  # module.firewall-policy-default.google_compute_firewall_policy.hierarchical[0] will be created
  + resource "google_compute_firewall_policy" "hierarchical" {
      + creation_timestamp = (known after apply)
      + fingerprint        = (known after apply)
      + firewall_policy_id = (known after apply)
      + id                 = (known after apply)
      + name               = (known after apply)
      + parent             = "folders/260455359833"
      + rule_tuple_count   = (known after apply)
      + self_link          = (known after apply)
      + self_link_with_id  = (known after apply)
      + short_name         = "net-default"
    }

  # module.firewall-policy-default.google_compute_firewall_policy_rule.hierarchical["ingress/allow-healthchecks"] will be created
  + resource "google_compute_firewall_policy_rule" "hierarchical" {
      + action             = "allow"
      + creation_timestamp = (known after apply)
      + description        = "Enable SSH, HTTP and HTTPS healthchecks"
      + direction          = "INGRESS"
      + disabled           = false
      + firewall_policy    = (known after apply)
      + id                 = (known after apply)
      + kind               = (known after apply)
      + priority           = 1001
      + rule_tuple_count   = (known after apply)

      + match {
          + src_ip_ranges = [
              + "35.191.0.0/16",
              + "130.211.0.0/22",
              + "209.85.152.0/22",
              + "209.85.204.0/22",
            ]

          + layer4_configs {
              + ip_protocol = "tcp"
              + ports       = [
                  + "22",
                  + "80",
                  + "443",
                ]
            }
        }
    }

  # module.firewall-policy-default.google_compute_firewall_policy_rule.hierarchical["ingress/allow-icmp"] will be created
  + resource "google_compute_firewall_policy_rule" "hierarchical" {
      + action             = "allow"
      + creation_timestamp = (known after apply)
      + description        = "Enable ICMP"
      + direction          = "INGRESS"
      + disabled           = false
      + firewall_policy    = (known after apply)
      + id                 = (known after apply)
      + kind               = (known after apply)
      + priority           = 1003
      + rule_tuple_count   = (known after apply)

      + match {
          + src_ip_ranges = [
              + "0.0.0.0/0",
            ]

          + layer4_configs {
              + ip_protocol = "icmp"
              + ports       = []
            }
        }
    }

  # module.firewall-policy-default.google_compute_firewall_policy_rule.hierarchical["ingress/allow-nat-ranges"] will be created
  + resource "google_compute_firewall_policy_rule" "hierarchical" {
      + action             = "allow"
      + creation_timestamp = (known after apply)
      + description        = "Enable NAT ranges for VPC serverless connector"
      + direction          = "INGRESS"
      + disabled           = false
      + firewall_policy    = (known after apply)
      + id                 = (known after apply)
      + kind               = (known after apply)
      + priority           = 1004
      + rule_tuple_count   = (known after apply)

      + match {
          + src_ip_ranges = [
              + "107.178.230.64/26",
              + "35.199.224.0/19",
            ]

          + layer4_configs {
              + ip_protocol = "all"
            }
        }
    }

  # module.firewall-policy-default.google_compute_firewall_policy_rule.hierarchical["ingress/allow-ssh-from-iap"] will be created
  + resource "google_compute_firewall_policy_rule" "hierarchical" {
      + action             = "allow"
      + creation_timestamp = (known after apply)
      + description        = "Enable SSH from IAP"
      + direction          = "INGRESS"
      + disabled           = false
      + enable_logging     = true
      + firewall_policy    = (known after apply)
      + id                 = (known after apply)
      + kind               = (known after apply)
      + priority           = 1002
      + rule_tuple_count   = (known after apply)

      + match {
          + src_ip_ranges = [
              + "35.235.240.0/20",
            ]

          + layer4_configs {
              + ip_protocol = "tcp"
              + ports       = [
                  + "22",
                ]
            }
        }
    }

  # module.folder.google_compute_firewall_policy_association.default[0] will be created
  + resource "google_compute_firewall_policy_association" "default" {
      + attachment_target = "folders/260455359833"
      + firewall_policy   = (known after apply)
      + id                = (known after apply)
      + name              = "default"
      + short_name        = (known after apply)
    }

  # module.landing-dns-policy-googleapis.google_dns_response_policy.default[0] will be created
  + resource "google_dns_response_policy" "default" {
      + description          = "Terraform managed."
      + id                   = (known after apply)
      + project              = "jpl-prod-net-landing-0"
      + response_policy_name = "googleapis"

      + networks {
          + network_url = (known after apply)
        }
    }

  # module.landing-dns-policy-googleapis.google_dns_response_policy_rule.default["accounts"] will be created
  + resource "google_dns_response_policy_rule" "default" {
      + dns_name        = "accounts.google.com."
      + id              = (known after apply)
      + project         = "jpl-prod-net-landing-0"
      + response_policy = "googleapis"
      + rule_name       = "accounts"

      + local_data {
          + local_datas {
              + name    = "accounts.google.com."
              + rrdatas = [
                  + "private.googleapis.com.",
                ]
              + type    = "CNAME"
            }
        }
    }

  # module.landing-dns-policy-googleapis.google_dns_response_policy_rule.default["aiplatform-notebook-cloud-all"] will be created
  + resource "google_dns_response_policy_rule" "default" {
      + dns_name        = "*.aiplatform-notebook.cloud.google.com."
      + id              = (known after apply)
      + project         = "jpl-prod-net-landing-0"
      + response_policy = "googleapis"
      + rule_name       = "aiplatform-notebook-cloud-all"

      + local_data {
          + local_datas {
              + name    = "*.aiplatform-notebook.cloud.google.com."
              + rrdatas = [
                  + "private.googleapis.com.",
                ]
              + type    = "CNAME"
            }
        }
    }

  # module.landing-dns-policy-googleapis.google_dns_response_policy_rule.default["aiplatform-notebook-gu-all"] will be created
  + resource "google_dns_response_policy_rule" "default" {
      + dns_name        = "*.aiplatform-notebook.googleusercontent.com."
      + id              = (known after apply)
      + project         = "jpl-prod-net-landing-0"
      + response_policy = "googleapis"
      + rule_name       = "aiplatform-notebook-gu-all"

      + local_data {
          + local_datas {
              + name    = "*.aiplatform-notebook.googleusercontent.com."
              + rrdatas = [
                  + "private.googleapis.com.",
                ]
              + type    = "CNAME"
            }
        }
    }

  # module.landing-dns-policy-googleapis.google_dns_response_policy_rule.default["backupdr-cloud"] will be created
  + resource "google_dns_response_policy_rule" "default" {
      + dns_name        = "backupdr.cloud.google.com."
      + id              = (known after apply)
      + project         = "jpl-prod-net-landing-0"
      + response_policy = "googleapis"
      + rule_name       = "backupdr-cloud"

      + local_data {
          + local_datas {
              + name    = "backupdr.cloud.google.com."
              + rrdatas = [
                  + "private.googleapis.com.",
                ]
              + type    = "CNAME"
            }
        }
    }

  # module.landing-dns-policy-googleapis.google_dns_response_policy_rule.default["backupdr-cloud-all"] will be created
  + resource "google_dns_response_policy_rule" "default" {
      + dns_name        = "*.backupdr.cloud.google.com."
      + id              = (known after apply)
      + project         = "jpl-prod-net-landing-0"
      + response_policy = "googleapis"
      + rule_name       = "backupdr-cloud-all"

      + local_data {
          + local_datas {
              + name    = "*.backupdr.cloud.google.com."
              + rrdatas = [
                  + "private.googleapis.com.",
                ]
              + type    = "CNAME"
            }
        }
    }

  # module.landing-dns-policy-googleapis.google_dns_response_policy_rule.default["backupdr-gu"] will be created
  + resource "google_dns_response_policy_rule" "default" {
      + dns_name        = "backupdr.googleusercontent.google.com."
      + id              = (known after apply)
      + project         = "jpl-prod-net-landing-0"
      + response_policy = "googleapis"
      + rule_name       = "backupdr-gu"

      + local_data {
          + local_datas {
              + name    = "backupdr.googleusercontent.google.com."
              + rrdatas = [
                  + "private.googleapis.com.",
                ]
              + type    = "CNAME"
            }
        }
    }

  # module.landing-dns-policy-googleapis.google_dns_response_policy_rule.default["backupdr-gu-all"] will be created
  + resource "google_dns_response_policy_rule" "default" {
      + dns_name        = "*.backupdr.googleusercontent.google.com."
      + id              = (known after apply)
      + project         = "jpl-prod-net-landing-0"
      + response_policy = "googleapis"
      + rule_name       = "backupdr-gu-all"

      + local_data {
          + local_datas {
              + name    = "*.backupdr.googleusercontent.google.com."
              + rrdatas = [
                  + "private.googleapis.com.",
                ]
              + type    = "CNAME"
            }
        }
    }

  # module.landing-dns-policy-googleapis.google_dns_response_policy_rule.default["cloudfunctions"] will be created
  + resource "google_dns_response_policy_rule" "default" {
      + dns_name        = "*.cloudfunctions.net."
      + id              = (known after apply)
      + project         = "jpl-prod-net-landing-0"
      + response_policy = "googleapis"
      + rule_name       = "cloudfunctions"

      + local_data {
          + local_datas {
              + name    = "*.cloudfunctions.net."
              + rrdatas = [
                  + "private.googleapis.com.",
                ]
              + type    = "CNAME"
            }
        }
    }

  # module.landing-dns-policy-googleapis.google_dns_response_policy_rule.default["cloudproxy"] will be created
  + resource "google_dns_response_policy_rule" "default" {
      + dns_name        = "*.cloudproxy.app."
      + id              = (known after apply)
      + project         = "jpl-prod-net-landing-0"
      + response_policy = "googleapis"
      + rule_name       = "cloudproxy"

      + local_data {
          + local_datas {
              + name    = "*.cloudproxy.app."
              + rrdatas = [
                  + "private.googleapis.com.",
                ]
              + type    = "CNAME"
            }
        }
    }

  # module.landing-dns-policy-googleapis.google_dns_response_policy_rule.default["composer-cloud-all"] will be created
  + resource "google_dns_response_policy_rule" "default" {
      + dns_name        = "*.composer.cloud.google.com."
      + id              = (known after apply)
      + project         = "jpl-prod-net-landing-0"
      + response_policy = "googleapis"
      + rule_name       = "composer-cloud-all"

      + local_data {
          + local_datas {
              + name    = "*.composer.cloud.google.com."
              + rrdatas = [
                  + "private.googleapis.com.",
                ]
              + type    = "CNAME"
            }
        }
    }

  # module.landing-dns-policy-googleapis.google_dns_response_policy_rule.default["composer-gu-all"] will be created
  + resource "google_dns_response_policy_rule" "default" {
      + dns_name        = "*.composer.googleusercontent.com."
      + id              = (known after apply)
      + project         = "jpl-prod-net-landing-0"
      + response_policy = "googleapis"
      + rule_name       = "composer-gu-all"

      + local_data {
          + local_datas {
              + name    = "*.composer.googleusercontent.com."
              + rrdatas = [
                  + "private.googleapis.com.",
                ]
              + type    = "CNAME"
            }
        }
    }

  # module.landing-dns-policy-googleapis.google_dns_response_policy_rule.default["datafusion-all"] will be created
  + resource "google_dns_response_policy_rule" "default" {
      + dns_name        = "*.datafusion.cloud.google.com."
      + id              = (known after apply)
      + project         = "jpl-prod-net-landing-0"
      + response_policy = "googleapis"
      + rule_name       = "datafusion-all"

      + local_data {
          + local_datas {
              + name    = "*.datafusion.cloud.google.com."
              + rrdatas = [
                  + "private.googleapis.com.",
                ]
              + type    = "CNAME"
            }
        }
    }

  # module.landing-dns-policy-googleapis.google_dns_response_policy_rule.default["datafusion-gu-all"] will be created
  + resource "google_dns_response_policy_rule" "default" {
      + dns_name        = "*.datafusion.googleusercontent.com."
      + id              = (known after apply)
      + project         = "jpl-prod-net-landing-0"
      + response_policy = "googleapis"
      + rule_name       = "datafusion-gu-all"

      + local_data {
          + local_datas {
              + name    = "*.datafusion.googleusercontent.com."
              + rrdatas = [
                  + "private.googleapis.com.",
                ]
              + type    = "CNAME"
            }
        }
    }

  # module.landing-dns-policy-googleapis.google_dns_response_policy_rule.default["dataproc"] will be created
  + resource "google_dns_response_policy_rule" "default" {
      + dns_name        = "dataproc.cloud.google.com."
      + id              = (known after apply)
      + project         = "jpl-prod-net-landing-0"
      + response_policy = "googleapis"
      + rule_name       = "dataproc"

      + local_data {
          + local_datas {
              + name    = "dataproc.cloud.google.com."
              + rrdatas = [
                  + "private.googleapis.com.",
                ]
              + type    = "CNAME"
            }
        }
    }

  # module.landing-dns-policy-googleapis.google_dns_response_policy_rule.default["dataproc-all"] will be created
  + resource "google_dns_response_policy_rule" "default" {
      + dns_name        = "*.dataproc.cloud.google.com."
      + id              = (known after apply)
      + project         = "jpl-prod-net-landing-0"
      + response_policy = "googleapis"
      + rule_name       = "dataproc-all"

      + local_data {
          + local_datas {
              + name    = "*.dataproc.cloud.google.com."
              + rrdatas = [
                  + "private.googleapis.com.",
                ]
              + type    = "CNAME"
            }
        }
    }

  # module.landing-dns-policy-googleapis.google_dns_response_policy_rule.default["dataproc-gu"] will be created
  + resource "google_dns_response_policy_rule" "default" {
      + dns_name        = "dataproc.googleusercontent.com."
      + id              = (known after apply)
      + project         = "jpl-prod-net-landing-0"
      + response_policy = "googleapis"
      + rule_name       = "dataproc-gu"

      + local_data {
          + local_datas {
              + name    = "dataproc.googleusercontent.com."
              + rrdatas = [
                  + "private.googleapis.com.",
                ]
              + type    = "CNAME"
            }
        }
    }

  # module.landing-dns-policy-googleapis.google_dns_response_policy_rule.default["dataproc-gu-all"] will be created
  + resource "google_dns_response_policy_rule" "default" {
      + dns_name        = "*.dataproc.googleusercontent.com."
      + id              = (known after apply)
      + project         = "jpl-prod-net-landing-0"
      + response_policy = "googleapis"
      + rule_name       = "dataproc-gu-all"

      + local_data {
          + local_datas {
              + name    = "*.dataproc.googleusercontent.com."
              + rrdatas = [
                  + "private.googleapis.com.",
                ]
              + type    = "CNAME"
            }
        }
    }

  # module.landing-dns-policy-googleapis.google_dns_response_policy_rule.default["dl"] will be created
  + resource "google_dns_response_policy_rule" "default" {
      + dns_name        = "dl.google.com."
      + id              = (known after apply)
      + project         = "jpl-prod-net-landing-0"
      + response_policy = "googleapis"
      + rule_name       = "dl"

      + local_data {
          + local_datas {
              + name    = "dl.google.com."
              + rrdatas = [
                  + "private.googleapis.com.",
                ]
              + type    = "CNAME"
            }
        }
    }

  # module.landing-dns-policy-googleapis.google_dns_response_policy_rule.default["gcr"] will be created
  + resource "google_dns_response_policy_rule" "default" {
      + dns_name        = "gcr.io."
      + id              = (known after apply)
      + project         = "jpl-prod-net-landing-0"
      + response_policy = "googleapis"
      + rule_name       = "gcr"

      + local_data {
          + local_datas {
              + name    = "gcr.io."
              + rrdatas = [
                  + "private.googleapis.com.",
                ]
              + type    = "CNAME"
            }
        }
    }

  # module.landing-dns-policy-googleapis.google_dns_response_policy_rule.default["gcr-all"] will be created
  + resource "google_dns_response_policy_rule" "default" {
      + dns_name        = "*.gcr.io."
      + id              = (known after apply)
      + project         = "jpl-prod-net-landing-0"
      + response_policy = "googleapis"
      + rule_name       = "gcr-all"

      + local_data {
          + local_datas {
              + name    = "*.gcr.io."
              + rrdatas = [
                  + "private.googleapis.com.",
                ]
              + type    = "CNAME"
            }
        }
    }

  # module.landing-dns-policy-googleapis.google_dns_response_policy_rule.default["gke-all"] will be created
  + resource "google_dns_response_policy_rule" "default" {
      + dns_name        = "*.gke.goog."
      + id              = (known after apply)
      + project         = "jpl-prod-net-landing-0"
      + response_policy = "googleapis"
      + rule_name       = "gke-all"

      + local_data {
          + local_datas {
              + name    = "*.gke.goog."
              + rrdatas = [
                  + "private.googleapis.com.",
                ]
              + type    = "CNAME"
            }
        }
    }

  # module.landing-dns-policy-googleapis.google_dns_response_policy_rule.default["googleapis-all"] will be created
  + resource "google_dns_response_policy_rule" "default" {
      + dns_name        = "*.googleapis.com."
      + id              = (known after apply)
      + project         = "jpl-prod-net-landing-0"
      + response_policy = "googleapis"
      + rule_name       = "googleapis-all"

      + local_data {
          + local_datas {
              + name    = "*.googleapis.com."
              + rrdatas = [
                  + "private.googleapis.com.",
                ]
              + type    = "CNAME"
            }
        }
    }

  # module.landing-dns-policy-googleapis.google_dns_response_policy_rule.default["googleapis-private"] will be created
  + resource "google_dns_response_policy_rule" "default" {
      + dns_name        = "private.googleapis.com."
      + id              = (known after apply)
      + project         = "jpl-prod-net-landing-0"
      + response_policy = "googleapis"
      + rule_name       = "googleapis-private"

      + local_data {
          + local_datas {
              + name    = "private.googleapis.com."
              + rrdatas = [
                  + "199.36.153.8",
                  + "199.36.153.9",
                  + "199.36.153.10",
                  + "199.36.153.11",
                ]
              + type    = "A"
            }
          + local_datas {
              + name    = "private.googleapis.com."
              + rrdatas = [
                  + "2600:2d00:2:2000::",
                ]
              + type    = "AAAA"
            }
        }
    }

  # module.landing-dns-policy-googleapis.google_dns_response_policy_rule.default["googleapis-restricted"] will be created
  + resource "google_dns_response_policy_rule" "default" {
      + dns_name        = "restricted.googleapis.com."
      + id              = (known after apply)
      + project         = "jpl-prod-net-landing-0"
      + response_policy = "googleapis"
      + rule_name       = "googleapis-restricted"

      + local_data {
          + local_datas {
              + name    = "restricted.googleapis.com."
              + rrdatas = [
                  + "199.36.153.4",
                  + "199.36.153.5",
                  + "199.36.153.6",
                  + "199.36.153.7",
                ]
              + type    = "A"
            }
          + local_datas {
              + name    = "restricted.googleapis.com."
              + rrdatas = [
                  + "2600:2d00:2:1000::",
                ]
              + type    = "AAAA"
            }
        }
    }

  # module.landing-dns-policy-googleapis.google_dns_response_policy_rule.default["gstatic-all"] will be created
  + resource "google_dns_response_policy_rule" "default" {
      + dns_name        = "*.gstatic.com."
      + id              = (known after apply)
      + project         = "jpl-prod-net-landing-0"
      + response_policy = "googleapis"
      + rule_name       = "gstatic-all"

      + local_data {
          + local_datas {
              + name    = "*.gstatic.com."
              + rrdatas = [
                  + "private.googleapis.com.",
                ]
              + type    = "CNAME"
            }
        }
    }

  # module.landing-dns-policy-googleapis.google_dns_response_policy_rule.default["kernels-gu"] will be created
  + resource "google_dns_response_policy_rule" "default" {
      + dns_name        = "kernels.googleusercontent.com."
      + id              = (known after apply)
      + project         = "jpl-prod-net-landing-0"
      + response_policy = "googleapis"
      + rule_name       = "kernels-gu"

      + local_data {
          + local_datas {
              + name    = "kernels.googleusercontent.com."
              + rrdatas = [
                  + "private.googleapis.com.",
                ]
              + type    = "CNAME"
            }
        }
    }

  # module.landing-dns-policy-googleapis.google_dns_response_policy_rule.default["kernels-gu-all"] will be created
  + resource "google_dns_response_policy_rule" "default" {
      + dns_name        = "*.kernels.googleusercontent.com."
      + id              = (known after apply)
      + project         = "jpl-prod-net-landing-0"
      + response_policy = "googleapis"
      + rule_name       = "kernels-gu-all"

      + local_data {
          + local_datas {
              + name    = "*.kernels.googleusercontent.com."
              + rrdatas = [
                  + "private.googleapis.com.",
                ]
              + type    = "CNAME"
            }
        }
    }

  # module.landing-dns-policy-googleapis.google_dns_response_policy_rule.default["ltsapis-all"] will be created
  + resource "google_dns_response_policy_rule" "default" {
      + dns_name        = "*.ltsapis.goog."
      + id              = (known after apply)
      + project         = "jpl-prod-net-landing-0"
      + response_policy = "googleapis"
      + rule_name       = "ltsapis-all"

      + local_data {
          + local_datas {
              + name    = "*.ltsapis.goog."
              + rrdatas = [
                  + "private.googleapis.com.",
                ]
              + type    = "CNAME"
            }
        }
    }

  # module.landing-dns-policy-googleapis.google_dns_response_policy_rule.default["notebooks-all"] will be created
  + resource "google_dns_response_policy_rule" "default" {
      + dns_name        = "*.notebooks.cloud.google.com."
      + id              = (known after apply)
      + project         = "jpl-prod-net-landing-0"
      + response_policy = "googleapis"
      + rule_name       = "notebooks-all"

      + local_data {
          + local_datas {
              + name    = "*.notebooks.cloud.google.com."
              + rrdatas = [
                  + "private.googleapis.com.",
                ]
              + type    = "CNAME"
            }
        }
    }

  # module.landing-dns-policy-googleapis.google_dns_response_policy_rule.default["notebooks-gu-all"] will be created
  + resource "google_dns_response_policy_rule" "default" {
      + dns_name        = "*.notebooks.googleusercontent.com."
      + id              = (known after apply)
      + project         = "jpl-prod-net-landing-0"
      + response_policy = "googleapis"
      + rule_name       = "notebooks-gu-all"

      + local_data {
          + local_datas {
              + name    = "*.notebooks.googleusercontent.com."
              + rrdatas = [
                  + "private.googleapis.com.",
                ]
              + type    = "CNAME"
            }
        }
    }

  # module.landing-dns-policy-googleapis.google_dns_response_policy_rule.default["packages-cloud"] will be created
  + resource "google_dns_response_policy_rule" "default" {
      + dns_name        = "packages.cloud.google.com."
      + id              = (known after apply)
      + project         = "jpl-prod-net-landing-0"
      + response_policy = "googleapis"
      + rule_name       = "packages-cloud"

      + local_data {
          + local_datas {
              + name    = "packages.cloud.google.com."
              + rrdatas = [
                  + "private.googleapis.com.",
                ]
              + type    = "CNAME"
            }
        }
    }

  # module.landing-dns-policy-googleapis.google_dns_response_policy_rule.default["packages-cloud-all"] will be created
  + resource "google_dns_response_policy_rule" "default" {
      + dns_name        = "*.packages.cloud.google.com."
      + id              = (known after apply)
      + project         = "jpl-prod-net-landing-0"
      + response_policy = "googleapis"
      + rule_name       = "packages-cloud-all"

      + local_data {
          + local_datas {
              + name    = "*.packages.cloud.google.com."
              + rrdatas = [
                  + "private.googleapis.com.",
                ]
              + type    = "CNAME"
            }
        }
    }

  # module.landing-dns-policy-googleapis.google_dns_response_policy_rule.default["pkgdev"] will be created
  + resource "google_dns_response_policy_rule" "default" {
      + dns_name        = "pkg.dev."
      + id              = (known after apply)
      + project         = "jpl-prod-net-landing-0"
      + response_policy = "googleapis"
      + rule_name       = "pkgdev"

      + local_data {
          + local_datas {
              + name    = "pkg.dev."
              + rrdatas = [
                  + "private.googleapis.com.",
                ]
              + type    = "CNAME"
            }
        }
    }

  # module.landing-dns-policy-googleapis.google_dns_response_policy_rule.default["pkgdev-all"] will be created
  + resource "google_dns_response_policy_rule" "default" {
      + dns_name        = "*.pkg.dev."
      + id              = (known after apply)
      + project         = "jpl-prod-net-landing-0"
      + response_policy = "googleapis"
      + rule_name       = "pkgdev-all"

      + local_data {
          + local_datas {
              + name    = "*.pkg.dev."
              + rrdatas = [
                  + "private.googleapis.com.",
                ]
              + type    = "CNAME"
            }
        }
    }

  # module.landing-dns-policy-googleapis.google_dns_response_policy_rule.default["pkigoog"] will be created
  + resource "google_dns_response_policy_rule" "default" {
      + dns_name        = "pki.goog."
      + id              = (known after apply)
      + project         = "jpl-prod-net-landing-0"
      + response_policy = "googleapis"
      + rule_name       = "pkigoog"

      + local_data {
          + local_datas {
              + name    = "pki.goog."
              + rrdatas = [
                  + "private.googleapis.com.",
                ]
              + type    = "CNAME"
            }
        }
    }

  # module.landing-dns-policy-googleapis.google_dns_response_policy_rule.default["pkigoog-all"] will be created
  + resource "google_dns_response_policy_rule" "default" {
      + dns_name        = "*.pki.goog."
      + id              = (known after apply)
      + project         = "jpl-prod-net-landing-0"
      + response_policy = "googleapis"
      + rule_name       = "pkigoog-all"

      + local_data {
          + local_datas {
              + name    = "*.pki.goog."
              + rrdatas = [
                  + "private.googleapis.com.",
                ]
              + type    = "CNAME"
            }
        }
    }

  # module.landing-dns-policy-googleapis.google_dns_response_policy_rule.default["run-all"] will be created
  + resource "google_dns_response_policy_rule" "default" {
      + dns_name        = "*.run.app."
      + id              = (known after apply)
      + project         = "jpl-prod-net-landing-0"
      + response_policy = "googleapis"
      + rule_name       = "run-all"

      + local_data {
          + local_datas {
              + name    = "*.run.app."
              + rrdatas = [
                  + "private.googleapis.com.",
                ]
              + type    = "CNAME"
            }
        }
    }

  # module.landing-dns-policy-googleapis.google_dns_response_policy_rule.default["source"] will be created
  + resource "google_dns_response_policy_rule" "default" {
      + dns_name        = "source.developers.google.com."
      + id              = (known after apply)
      + project         = "jpl-prod-net-landing-0"
      + response_policy = "googleapis"
      + rule_name       = "source"

      + local_data {
          + local_datas {
              + name    = "source.developers.google.com."
              + rrdatas = [
                  + "private.googleapis.com.",
                ]
              + type    = "CNAME"
            }
        }
    }

  # module.landing-dns-policy-googleapis.google_dns_response_policy_rule.default["storage"] will be created
  + resource "google_dns_response_policy_rule" "default" {
      + dns_name        = "storage.cloud.google.com."
      + id              = (known after apply)
      + project         = "jpl-prod-net-landing-0"
      + response_policy = "googleapis"
      + rule_name       = "storage"

      + local_data {
          + local_datas {
              + name    = "storage.cloud.google.com."
              + rrdatas = [
                  + "private.googleapis.com.",
                ]
              + type    = "CNAME"
            }
        }
    }

  # module.landing-dns-priv-gcp.google_dns_managed_zone.dns_managed_zone[0] will be created
  + resource "google_dns_managed_zone" "dns_managed_zone" {
      + creation_time    = (known after apply)
      + description      = "Terraform managed."
      + dns_name         = "gcp.example.com."
      + effective_labels = {
          + "goog-terraform-provisioned" = "true"
        }
      + force_destroy    = false
      + id               = (known after apply)
      + managed_zone_id  = (known after apply)
      + name             = "gcp-example-com"
      + name_servers     = (known after apply)
      + project          = "jpl-prod-net-landing-0"
      + reverse_lookup   = false
      + terraform_labels = {
          + "goog-terraform-provisioned" = "true"
        }
      + visibility       = "private"

      + cloud_logging_config {
          + enable_logging = false
        }

      + dnssec_config (known after apply)

      + private_visibility_config (known after apply)
    }

  # module.landing-dns-priv-gcp.google_dns_record_set.dns_record_set["A localhost"] will be created
  + resource "google_dns_record_set" "dns_record_set" {
      + id           = (known after apply)
      + managed_zone = "gcp-example-com"
      + name         = "localhost.gcp.example.com."
      + project      = "jpl-prod-net-landing-0"
      + rrdatas      = [
          + "127.0.0.1",
        ]
      + ttl          = 300
      + type         = "A"
    }

  # module.landing-dns-priv-googleapis.google_dns_managed_zone.dns_managed_zone[0] will be created
  + resource "google_dns_managed_zone" "dns_managed_zone" {
      + creation_time    = (known after apply)
      + description      = "Terraform managed."
      + dns_name         = "googleapis.com."
      + effective_labels = {
          + "goog-terraform-provisioned" = "true"
        }
      + force_destroy    = false
      + id               = (known after apply)
      + managed_zone_id  = (known after apply)
      + name             = "googleapis-com"
      + name_servers     = (known after apply)
      + project          = "jpl-prod-net-landing-0"
      + reverse_lookup   = false
      + terraform_labels = {
          + "goog-terraform-provisioned" = "true"
        }
      + visibility       = "private"

      + cloud_logging_config {
          + enable_logging = false
        }

      + dnssec_config (known after apply)

      + private_visibility_config (known after apply)
    }

  # module.landing-firewall[0].google_compute_firewall.custom-rules["allow-onprem-probes-landing-example"] will be created
  + resource "google_compute_firewall" "custom-rules" {
      + creation_timestamp = (known after apply)
      + description        = "Allow traffic from onprem probes"
      + destination_ranges = (known after apply)
      + direction          = "INGRESS"
      + disabled           = false
      + enable_logging     = (known after apply)
      + id                 = (known after apply)
      + name               = "allow-onprem-probes-landing-example"
      + network            = "prod-landing-0"
      + priority           = 1000
      + project            = "jpl-prod-net-landing-0"
      + self_link          = (known after apply)
      + source_ranges      = [
          + "10.255.255.254/32",
        ]

      + allow {
          + ports    = [
              + "12345",
            ]
          + protocol = "tcp"
        }
    }

  # module.landing-firewall[0].google_compute_firewall.custom-rules["ingress-default-landing-deny"] will be created
  + resource "google_compute_firewall" "custom-rules" {
      + creation_timestamp = (known after apply)
      + description        = "Deny and log any unmatched ingress traffic."
      + destination_ranges = (known after apply)
      + direction          = "INGRESS"
      + disabled           = false
      + enable_logging     = (known after apply)
      + id                 = (known after apply)
      + name               = "ingress-default-landing-deny"
      + network            = "prod-landing-0"
      + priority           = 65535
      + project            = "jpl-prod-net-landing-0"
      + self_link          = (known after apply)
      + source_ranges      = [
          + "0.0.0.0/0",
        ]

      + deny {
          + ports    = []
          + protocol = "all"
        }

      + log_config {
          + metadata = "EXCLUDE_ALL_METADATA"
        }
    }

  # module.landing-project.google_compute_shared_vpc_host_project.shared_vpc_host[0] will be created
  + resource "google_compute_shared_vpc_host_project" "shared_vpc_host" {
      + id      = (known after apply)
      + project = "jpl-prod-net-landing-0"
    }

  # module.landing-project.google_project.project[0] will be created
  + resource "google_project" "project" {
      + auto_create_network = false
      + billing_account     = "0189FA-E139FD-136A58"
      + deletion_policy     = "DELETE"
      + effective_labels    = {
          + "goog-terraform-provisioned" = "true"
        }
      + folder_id           = "260455359833"
      + id                  = (known after apply)
      + name                = "jpl-prod-net-landing-0"
      + number              = (known after apply)
      + project_id          = "jpl-prod-net-landing-0"
      + terraform_labels    = {
          + "goog-terraform-provisioned" = "true"
        }
    }

  # module.landing-project.google_project_iam_member.service_agents["compute-system"] will be created
  + resource "google_project_iam_member" "service_agents" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-prod-net-landing-0"
      + role    = "roles/compute.serviceAgent"
    }

  # module.landing-project.google_project_iam_member.service_agents["dns"] will be created
  + resource "google_project_iam_member" "service_agents" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-prod-net-landing-0"
      + role    = "roles/dns.serviceAgent"
    }

  # module.landing-project.google_project_iam_member.service_agents["networkconnectivity"] will be created
  + resource "google_project_iam_member" "service_agents" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-prod-net-landing-0"
      + role    = "roles/networkconnectivity.serviceAgent"
    }

  # module.landing-project.google_project_iam_member.service_agents["networkmanagement"] will be created
  + resource "google_project_iam_member" "service_agents" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-prod-net-landing-0"
      + role    = "roles/networkmanagement.serviceAgent"
    }

  # module.landing-project.google_project_service.project_services["compute.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-prod-net-landing-0"
      + service                    = "compute.googleapis.com"
    }

  # module.landing-project.google_project_service.project_services["dns.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-prod-net-landing-0"
      + service                    = "dns.googleapis.com"
    }

  # module.landing-project.google_project_service.project_services["iap.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-prod-net-landing-0"
      + service                    = "iap.googleapis.com"
    }

  # module.landing-project.google_project_service.project_services["networkconnectivity.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-prod-net-landing-0"
      + service                    = "networkconnectivity.googleapis.com"
    }

  # module.landing-project.google_project_service.project_services["networkmanagement.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-prod-net-landing-0"
      + service                    = "networkmanagement.googleapis.com"
    }

  # module.landing-project.google_project_service.project_services["stackdriver.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-prod-net-landing-0"
      + service                    = "stackdriver.googleapis.com"
    }

  # module.landing-project.google_project_service_identity.default["dns.googleapis.com"] will be created
  + resource "google_project_service_identity" "default" {
      + email   = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-prod-net-landing-0"
      + service = "dns.googleapis.com"
    }

  # module.landing-project.google_project_service_identity.default["iap.googleapis.com"] will be created
  + resource "google_project_service_identity" "default" {
      + email   = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-prod-net-landing-0"
      + service = "iap.googleapis.com"
    }

  # module.landing-project.google_project_service_identity.default["networkconnectivity.googleapis.com"] will be created
  + resource "google_project_service_identity" "default" {
      + email   = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-prod-net-landing-0"
      + service = "networkconnectivity.googleapis.com"
    }

  # module.landing-project.google_project_service_identity.default["networkmanagement.googleapis.com"] will be created
  + resource "google_project_service_identity" "default" {
      + email   = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-prod-net-landing-0"
      + service = "networkmanagement.googleapis.com"
    }

  # module.landing-project.google_tags_tag_binding.binding["environment"] will be created
  + resource "google_tags_tag_binding" "binding" {
      + id        = (known after apply)
      + name      = (known after apply)
      + parent    = (known after apply)
      + tag_value = "tagValues/281480660532594"
    }

  # module.landing-vpc.google_compute_network.network[0] will be created
  + resource "google_compute_network" "network" {
      + auto_create_subnetworks                   = false
      + bgp_always_compare_med                    = (known after apply)
      + bgp_best_path_selection_mode              = (known after apply)
      + bgp_inter_region_cost                     = (known after apply)
      + delete_default_routes_on_create           = true
      + description                               = "Terraform-managed."
      + gateway_ipv4                              = (known after apply)
      + id                                        = (known after apply)
      + internal_ipv6_range                       = (known after apply)
      + mtu                                       = 1500
      + name                                      = "prod-landing-0"
      + network_firewall_policy_enforcement_order = "AFTER_CLASSIC_FIREWALL"
      + network_id                                = (known after apply)
      + numeric_id                                = (known after apply)
      + project                                   = "jpl-prod-net-landing-0"
      + routing_mode                              = "GLOBAL"
      + self_link                                 = (known after apply)
    }

  # module.landing-vpc.google_compute_route.gateway["default"] will be created
  + resource "google_compute_route" "gateway" {
      + as_paths                   = (known after apply)
      + creation_timestamp         = (known after apply)
      + description                = "Terraform-managed."
      + dest_range                 = "0.0.0.0/0"
      + id                         = (known after apply)
      + name                       = "prod-landing-0-default"
      + network                    = "prod-landing-0"
      + next_hop_gateway           = "default-internet-gateway"
      + next_hop_hub               = (known after apply)
      + next_hop_instance_zone     = (known after apply)
      + next_hop_inter_region_cost = (known after apply)
      + next_hop_ip                = (known after apply)
      + next_hop_med               = (known after apply)
      + next_hop_network           = (known after apply)
      + next_hop_origin            = (known after apply)
      + next_hop_peering           = (known after apply)
      + priority                   = 1000
      + project                    = "jpl-prod-net-landing-0"
      + route_status               = (known after apply)
      + route_type                 = (known after apply)
      + self_link                  = (known after apply)
      + warnings                   = (known after apply)
    }

  # module.landing-vpc.google_compute_route.gateway["directpath-googleapis"] will be created
  + resource "google_compute_route" "gateway" {
      + as_paths                   = (known after apply)
      + creation_timestamp         = (known after apply)
      + description                = "Terraform-managed."
      + dest_range                 = "34.126.0.0/18"
      + id                         = (known after apply)
      + name                       = "prod-landing-0-directpath-googleapis"
      + network                    = "prod-landing-0"
      + next_hop_gateway           = "default-internet-gateway"
      + next_hop_hub               = (known after apply)
      + next_hop_instance_zone     = (known after apply)
      + next_hop_inter_region_cost = (known after apply)
      + next_hop_ip                = (known after apply)
      + next_hop_med               = (known after apply)
      + next_hop_network           = (known after apply)
      + next_hop_origin            = (known after apply)
      + next_hop_peering           = (known after apply)
      + priority                   = 1000
      + project                    = "jpl-prod-net-landing-0"
      + route_status               = (known after apply)
      + route_type                 = (known after apply)
      + self_link                  = (known after apply)
      + warnings                   = (known after apply)
    }

  # module.landing-vpc.google_compute_route.gateway["private-googleapis"] will be created
  + resource "google_compute_route" "gateway" {
      + as_paths                   = (known after apply)
      + creation_timestamp         = (known after apply)
      + description                = "Terraform-managed."
      + dest_range                 = "199.36.153.8/30"
      + id                         = (known after apply)
      + name                       = "prod-landing-0-private-googleapis"
      + network                    = "prod-landing-0"
      + next_hop_gateway           = "default-internet-gateway"
      + next_hop_hub               = (known after apply)
      + next_hop_instance_zone     = (known after apply)
      + next_hop_inter_region_cost = (known after apply)
      + next_hop_ip                = (known after apply)
      + next_hop_med               = (known after apply)
      + next_hop_network           = (known after apply)
      + next_hop_origin            = (known after apply)
      + next_hop_peering           = (known after apply)
      + priority                   = 1000
      + project                    = "jpl-prod-net-landing-0"
      + route_status               = (known after apply)
      + route_type                 = (known after apply)
      + self_link                  = (known after apply)
      + warnings                   = (known after apply)
    }

  # module.landing-vpc.google_compute_route.gateway["restricted-googleapis"] will be created
  + resource "google_compute_route" "gateway" {
      + as_paths                   = (known after apply)
      + creation_timestamp         = (known after apply)
      + description                = "Terraform-managed."
      + dest_range                 = "199.36.153.4/30"
      + id                         = (known after apply)
      + name                       = "prod-landing-0-restricted-googleapis"
      + network                    = "prod-landing-0"
      + next_hop_gateway           = "default-internet-gateway"
      + next_hop_hub               = (known after apply)
      + next_hop_instance_zone     = (known after apply)
      + next_hop_inter_region_cost = (known after apply)
      + next_hop_ip                = (known after apply)
      + next_hop_med               = (known after apply)
      + next_hop_network           = (known after apply)
      + next_hop_origin            = (known after apply)
      + next_hop_peering           = (known after apply)
      + priority                   = 1000
      + project                    = "jpl-prod-net-landing-0"
      + route_status               = (known after apply)
      + route_type                 = (known after apply)
      + self_link                  = (known after apply)
      + warnings                   = (known after apply)
    }

  # module.landing-vpc.google_compute_subnetwork.subnetwork["southamerica-east1/rd-gcp-landing-net-spoke-0"] will be created
  + resource "google_compute_subnetwork" "subnetwork" {
      + allow_subnet_cidr_routes_overlap = (known after apply)
      + creation_timestamp               = (known after apply)
      + description                      = "Default primary-region subnet for landing"
      + enable_flow_logs                 = (known after apply)
      + external_ipv6_prefix             = (known after apply)
      + fingerprint                      = (known after apply)
      + gateway_address                  = (known after apply)
      + id                               = (known after apply)
      + internal_ipv6_prefix             = (known after apply)
      + ip_cidr_range                    = "10.239.240.0/20"
      + ipv6_cidr_range                  = (known after apply)
      + ipv6_gce_endpoint                = (known after apply)
      + name                             = "rd-gcp-landing-net-spoke-0"
      + network                          = "prod-landing-0"
      + private_ip_google_access         = true
      + private_ipv6_google_access       = (known after apply)
      + project                          = "jpl-prod-net-landing-0"
      + purpose                          = (known after apply)
      + region                           = "southamerica-east1"
      + self_link                        = (known after apply)
      + send_secondary_ip_range_if_empty = true
      + stack_type                       = (known after apply)
      + state                            = (known after apply)
      + subnetwork_id                    = (known after apply)

      + secondary_ip_range (known after apply)
    }

  # module.landing-vpc.google_dns_policy.default[0] will be created
  + resource "google_dns_policy" "default" {
      + description               = "Managed by Terraform"
      + enable_inbound_forwarding = true
      + enable_logging            = true
      + id                        = (known after apply)
      + name                      = "prod-landing-0"
      + project                   = "jpl-prod-net-landing-0"

      + networks {
          + network_url = (known after apply)
        }
    }

  # module.peering-dev[0].google_compute_network_peering.local_network_peering will be created
  + resource "google_compute_network_peering" "local_network_peering" {
      + export_custom_routes                = true
      + export_subnet_routes_with_public_ip = true
      + id                                  = (known after apply)
      + import_custom_routes                = true
      + name                                = (known after apply)
      + network                             = (known after apply)
      + peer_network                        = (known after apply)
      + stack_type                          = "IPV4_ONLY"
      + state                               = (known after apply)
      + state_details                       = (known after apply)
    }

  # module.peering-dev[0].google_compute_network_peering.peer_network_peering[0] will be created
  + resource "google_compute_network_peering" "peer_network_peering" {
      + export_custom_routes                = true
      + export_subnet_routes_with_public_ip = true
      + id                                  = (known after apply)
      + import_custom_routes                = true
      + name                                = (known after apply)
      + network                             = (known after apply)
      + peer_network                        = (known after apply)
      + stack_type                          = "IPV4_ONLY"
      + state                               = (known after apply)
      + state_details                       = (known after apply)
    }

  # module.peering-prod[0].google_compute_network_peering.local_network_peering will be created
  + resource "google_compute_network_peering" "local_network_peering" {
      + export_custom_routes                = true
      + export_subnet_routes_with_public_ip = true
      + id                                  = (known after apply)
      + import_custom_routes                = true
      + name                                = (known after apply)
      + network                             = (known after apply)
      + peer_network                        = (known after apply)
      + stack_type                          = "IPV4_ONLY"
      + state                               = (known after apply)
      + state_details                       = (known after apply)
    }

  # module.peering-prod[0].google_compute_network_peering.peer_network_peering[0] will be created
  + resource "google_compute_network_peering" "peer_network_peering" {
      + export_custom_routes                = true
      + export_subnet_routes_with_public_ip = true
      + id                                  = (known after apply)
      + import_custom_routes                = true
      + name                                = (known after apply)
      + network                             = (known after apply)
      + peer_network                        = (known after apply)
      + stack_type                          = "IPV4_ONLY"
      + state                               = (known after apply)
      + state_details                       = (known after apply)
    }

  # module.poc-spoke-project.google_compute_shared_vpc_host_project.shared_vpc_host[0] will be created
  + resource "google_compute_shared_vpc_host_project" "shared_vpc_host" {
      + id      = (known after apply)
      + project = "jpl-poc-net-spoke-0"
    }

  # module.poc-spoke-project.google_monitoring_monitored_project.primary["jpl-prod-net-landing-0"] will be created
  + resource "google_monitoring_monitored_project" "primary" {
      + create_time   = (known after apply)
      + id            = (known after apply)
      + metrics_scope = "jpl-prod-net-landing-0"
      + name          = "jpl-poc-net-spoke-0"
    }

  # module.poc-spoke-project.google_project.project[0] will be created
  + resource "google_project" "project" {
      + auto_create_network = false
      + billing_account     = "0189FA-E139FD-136A58"
      + deletion_policy     = "DELETE"
      + effective_labels    = {
          + "goog-terraform-provisioned" = "true"
        }
      + folder_id           = "260455359833"
      + id                  = (known after apply)
      + name                = "jpl-poc-net-spoke-0"
      + number              = (known after apply)
      + project_id          = "jpl-poc-net-spoke-0"
      + terraform_labels    = {
          + "goog-terraform-provisioned" = "true"
        }
    }

  # module.poc-spoke-project.google_project_iam_binding.authoritative["organizations/890114964408/roles/projectIamViewer"] will be created
  + resource "google_project_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + project = "jpl-poc-net-spoke-0"
      + role    = "organizations/890114964408/roles/projectIamViewer"
    }

  # module.poc-spoke-project.google_project_iam_member.service_agents["compute-system"] will be created
  + resource "google_project_iam_member" "service_agents" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-poc-net-spoke-0"
      + role    = "roles/compute.serviceAgent"
    }

  # module.poc-spoke-project.google_project_iam_member.service_agents["container-engine-robot"] will be created
  + resource "google_project_iam_member" "service_agents" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-poc-net-spoke-0"
      + role    = "roles/container.serviceAgent"
    }

  # module.poc-spoke-project.google_project_iam_member.service_agents["dns"] will be created
  + resource "google_project_iam_member" "service_agents" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-poc-net-spoke-0"
      + role    = "roles/dns.serviceAgent"
    }

  # module.poc-spoke-project.google_project_iam_member.service_agents["gkenode"] will be created
  + resource "google_project_iam_member" "service_agents" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-poc-net-spoke-0"
      + role    = "roles/container.defaultNodeServiceAgent"
    }

  # module.poc-spoke-project.google_project_iam_member.service_agents["networkmanagement"] will be created
  + resource "google_project_iam_member" "service_agents" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-poc-net-spoke-0"
      + role    = "roles/networkmanagement.serviceAgent"
    }

  # module.poc-spoke-project.google_project_iam_member.service_agents["service-networking"] will be created
  + resource "google_project_iam_member" "service_agents" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-poc-net-spoke-0"
      + role    = "roles/servicenetworking.serviceAgent"
    }

  # module.poc-spoke-project.google_project_iam_member.service_agents["vmwareengine"] will be created
  + resource "google_project_iam_member" "service_agents" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-poc-net-spoke-0"
      + role    = "roles/vmwareengine.serviceAgent"
    }

  # module.poc-spoke-project.google_project_iam_member.service_agents["vpcaccess"] will be created
  + resource "google_project_iam_member" "service_agents" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-poc-net-spoke-0"
      + role    = "roles/vpcaccess.serviceAgent"
    }

  # module.poc-spoke-project.google_project_service.project_services["compute.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-poc-net-spoke-0"
      + service                    = "compute.googleapis.com"
    }

  # module.poc-spoke-project.google_project_service.project_services["container.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-poc-net-spoke-0"
      + service                    = "container.googleapis.com"
    }

  # module.poc-spoke-project.google_project_service.project_services["dns.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-poc-net-spoke-0"
      + service                    = "dns.googleapis.com"
    }

  # module.poc-spoke-project.google_project_service.project_services["iap.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-poc-net-spoke-0"
      + service                    = "iap.googleapis.com"
    }

  # module.poc-spoke-project.google_project_service.project_services["networkmanagement.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-poc-net-spoke-0"
      + service                    = "networkmanagement.googleapis.com"
    }

  # module.poc-spoke-project.google_project_service.project_services["networksecurity.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-poc-net-spoke-0"
      + service                    = "networksecurity.googleapis.com"
    }

  # module.poc-spoke-project.google_project_service.project_services["servicenetworking.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-poc-net-spoke-0"
      + service                    = "servicenetworking.googleapis.com"
    }

  # module.poc-spoke-project.google_project_service.project_services["stackdriver.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-poc-net-spoke-0"
      + service                    = "stackdriver.googleapis.com"
    }

  # module.poc-spoke-project.google_project_service.project_services["vmwareengine.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-poc-net-spoke-0"
      + service                    = "vmwareengine.googleapis.com"
    }

  # module.poc-spoke-project.google_project_service.project_services["vpcaccess.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-poc-net-spoke-0"
      + service                    = "vpcaccess.googleapis.com"
    }

  # module.poc-spoke-project.google_project_service_identity.default["container.googleapis.com"] will be created
  + resource "google_project_service_identity" "default" {
      + email   = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-poc-net-spoke-0"
      + service = "container.googleapis.com"
    }

  # module.poc-spoke-project.google_project_service_identity.default["dns.googleapis.com"] will be created
  + resource "google_project_service_identity" "default" {
      + email   = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-poc-net-spoke-0"
      + service = "dns.googleapis.com"
    }

  # module.poc-spoke-project.google_project_service_identity.default["iap.googleapis.com"] will be created
  + resource "google_project_service_identity" "default" {
      + email   = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-poc-net-spoke-0"
      + service = "iap.googleapis.com"
    }

  # module.poc-spoke-project.google_project_service_identity.default["networkmanagement.googleapis.com"] will be created
  + resource "google_project_service_identity" "default" {
      + email   = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-poc-net-spoke-0"
      + service = "networkmanagement.googleapis.com"
    }

  # module.poc-spoke-project.google_project_service_identity.default["networksecurity.googleapis.com"] will be created
  + resource "google_project_service_identity" "default" {
      + email   = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-poc-net-spoke-0"
      + service = "networksecurity.googleapis.com"
    }

  # module.poc-spoke-project.google_project_service_identity.default["servicenetworking.googleapis.com"] will be created
  + resource "google_project_service_identity" "default" {
      + email   = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-poc-net-spoke-0"
      + service = "servicenetworking.googleapis.com"
    }

  # module.poc-spoke-project.google_project_service_identity.default["vmwareengine.googleapis.com"] will be created
  + resource "google_project_service_identity" "default" {
      + email   = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-poc-net-spoke-0"
      + service = "vmwareengine.googleapis.com"
    }

  # module.poc-spoke-project.google_project_service_identity.default["vpcaccess.googleapis.com"] will be created
  + resource "google_project_service_identity" "default" {
      + email   = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-poc-net-spoke-0"
      + service = "vpcaccess.googleapis.com"
    }

  # module.poc-spoke-vpc.google_compute_network.network[0] will be created
  + resource "google_compute_network" "network" {
      + auto_create_subnetworks                   = false
      + bgp_always_compare_med                    = (known after apply)
      + bgp_best_path_selection_mode              = (known after apply)
      + bgp_inter_region_cost                     = (known after apply)
      + delete_default_routes_on_create           = true
      + description                               = "Terraform-managed."
      + gateway_ipv4                              = (known after apply)
      + id                                        = (known after apply)
      + internal_ipv6_range                       = (known after apply)
      + mtu                                       = 1500
      + name                                      = "poc-spoke-0"
      + network_firewall_policy_enforcement_order = "AFTER_CLASSIC_FIREWALL"
      + network_id                                = (known after apply)
      + numeric_id                                = (known after apply)
      + project                                   = "jpl-poc-net-spoke-0"
      + routing_mode                              = "GLOBAL"
      + self_link                                 = (known after apply)
    }

  # module.poc-spoke-vpc.google_compute_route.gateway["default"] will be created
  + resource "google_compute_route" "gateway" {
      + as_paths                   = (known after apply)
      + creation_timestamp         = (known after apply)
      + description                = "Terraform-managed."
      + dest_range                 = "0.0.0.0/0"
      + id                         = (known after apply)
      + name                       = "poc-spoke-0-default"
      + network                    = "poc-spoke-0"
      + next_hop_gateway           = "default-internet-gateway"
      + next_hop_hub               = (known after apply)
      + next_hop_instance_zone     = (known after apply)
      + next_hop_inter_region_cost = (known after apply)
      + next_hop_ip                = (known after apply)
      + next_hop_med               = (known after apply)
      + next_hop_network           = (known after apply)
      + next_hop_origin            = (known after apply)
      + next_hop_peering           = (known after apply)
      + priority                   = 1000
      + project                    = "jpl-poc-net-spoke-0"
      + route_status               = (known after apply)
      + route_type                 = (known after apply)
      + self_link                  = (known after apply)
      + warnings                   = (known after apply)
    }

  # module.poc-spoke-vpc.google_compute_route.gateway["directpath-googleapis"] will be created
  + resource "google_compute_route" "gateway" {
      + as_paths                   = (known after apply)
      + creation_timestamp         = (known after apply)
      + description                = "Terraform-managed."
      + dest_range                 = "34.126.0.0/18"
      + id                         = (known after apply)
      + name                       = "poc-spoke-0-directpath-googleapis"
      + network                    = "poc-spoke-0"
      + next_hop_gateway           = "default-internet-gateway"
      + next_hop_hub               = (known after apply)
      + next_hop_instance_zone     = (known after apply)
      + next_hop_inter_region_cost = (known after apply)
      + next_hop_ip                = (known after apply)
      + next_hop_med               = (known after apply)
      + next_hop_network           = (known after apply)
      + next_hop_origin            = (known after apply)
      + next_hop_peering           = (known after apply)
      + priority                   = 1000
      + project                    = "jpl-poc-net-spoke-0"
      + route_status               = (known after apply)
      + route_type                 = (known after apply)
      + self_link                  = (known after apply)
      + warnings                   = (known after apply)
    }

  # module.poc-spoke-vpc.google_compute_route.gateway["private-googleapis"] will be created
  + resource "google_compute_route" "gateway" {
      + as_paths                   = (known after apply)
      + creation_timestamp         = (known after apply)
      + description                = "Terraform-managed."
      + dest_range                 = "199.36.153.8/30"
      + id                         = (known after apply)
      + name                       = "poc-spoke-0-private-googleapis"
      + network                    = "poc-spoke-0"
      + next_hop_gateway           = "default-internet-gateway"
      + next_hop_hub               = (known after apply)
      + next_hop_instance_zone     = (known after apply)
      + next_hop_inter_region_cost = (known after apply)
      + next_hop_ip                = (known after apply)
      + next_hop_med               = (known after apply)
      + next_hop_network           = (known after apply)
      + next_hop_origin            = (known after apply)
      + next_hop_peering           = (known after apply)
      + priority                   = 1000
      + project                    = "jpl-poc-net-spoke-0"
      + route_status               = (known after apply)
      + route_type                 = (known after apply)
      + self_link                  = (known after apply)
      + warnings                   = (known after apply)
    }

  # module.poc-spoke-vpc.google_compute_route.gateway["restricted-googleapis"] will be created
  + resource "google_compute_route" "gateway" {
      + as_paths                   = (known after apply)
      + creation_timestamp         = (known after apply)
      + description                = "Terraform-managed."
      + dest_range                 = "199.36.153.4/30"
      + id                         = (known after apply)
      + name                       = "poc-spoke-0-restricted-googleapis"
      + network                    = "poc-spoke-0"
      + next_hop_gateway           = "default-internet-gateway"
      + next_hop_hub               = (known after apply)
      + next_hop_instance_zone     = (known after apply)
      + next_hop_inter_region_cost = (known after apply)
      + next_hop_ip                = (known after apply)
      + next_hop_med               = (known after apply)
      + next_hop_network           = (known after apply)
      + next_hop_origin            = (known after apply)
      + next_hop_peering           = (known after apply)
      + priority                   = 1000
      + project                    = "jpl-poc-net-spoke-0"
      + route_status               = (known after apply)
      + route_type                 = (known after apply)
      + self_link                  = (known after apply)
      + warnings                   = (known after apply)
    }

  # module.poc-spoke-vpc.google_compute_subnetwork.subnetwork["southamerica-east1/rd-gcp-poc-net-spoke-0"] will be created
  + resource "google_compute_subnetwork" "subnetwork" {
      + allow_subnet_cidr_routes_overlap = (known after apply)
      + creation_timestamp               = (known after apply)
      + description                      = "Default primary-region subnet for POC"
      + enable_flow_logs                 = (known after apply)
      + external_ipv6_prefix             = (known after apply)
      + fingerprint                      = (known after apply)
      + gateway_address                  = (known after apply)
      + id                               = (known after apply)
      + internal_ipv6_prefix             = (known after apply)
      + ip_cidr_range                    = "10.240.0.0/18"
      + ipv6_cidr_range                  = (known after apply)
      + ipv6_gce_endpoint                = (known after apply)
      + name                             = "rd-gcp-poc-net-spoke-0"
      + network                          = "poc-spoke-0"
      + private_ip_google_access         = true
      + private_ipv6_google_access       = (known after apply)
      + project                          = "jpl-poc-net-spoke-0"
      + purpose                          = (known after apply)
      + region                           = "southamerica-east1"
      + self_link                        = (known after apply)
      + send_secondary_ip_range_if_empty = true
      + stack_type                       = (known after apply)
      + state                            = (known after apply)
      + subnetwork_id                    = (known after apply)

      + secondary_ip_range (known after apply)
    }

  # module.poc-spoke-vpc.google_dns_policy.default[0] will be created
  + resource "google_dns_policy" "default" {
      + description               = "Managed by Terraform"
      + enable_inbound_forwarding = true
      + enable_logging            = true
      + id                        = (known after apply)
      + name                      = "poc-spoke-0"
      + project                   = "jpl-poc-net-spoke-0"

      + networks {
          + network_url = (known after apply)
        }
    }

  # module.prod-dns-peer-landing-rev-10.google_dns_managed_zone.dns_managed_zone[0] will be created
  + resource "google_dns_managed_zone" "dns_managed_zone" {
      + creation_time    = (known after apply)
      + description      = "Terraform managed."
      + dns_name         = "10.in-addr.arpa."
      + effective_labels = {
          + "goog-terraform-provisioned" = "true"
        }
      + force_destroy    = false
      + id               = (known after apply)
      + managed_zone_id  = (known after apply)
      + name             = "prod-reverse-10-dns-peering"
      + name_servers     = (known after apply)
      + project          = "jpl-prod-net-spoke-0"
      + reverse_lookup   = false
      + terraform_labels = {
          + "goog-terraform-provisioned" = "true"
        }
      + visibility       = "private"

      + cloud_logging_config {
          + enable_logging = false
        }

      + dnssec_config (known after apply)

      + peering_config (known after apply)

      + private_visibility_config (known after apply)
    }

  # module.prod-dns-peer-landing-root.google_dns_managed_zone.dns_managed_zone[0] will be created
  + resource "google_dns_managed_zone" "dns_managed_zone" {
      + creation_time    = (known after apply)
      + description      = "Terraform managed."
      + dns_name         = "."
      + effective_labels = {
          + "goog-terraform-provisioned" = "true"
        }
      + force_destroy    = false
      + id               = (known after apply)
      + managed_zone_id  = (known after apply)
      + name             = "prod-root-dns-peering"
      + name_servers     = (known after apply)
      + project          = "jpl-prod-net-spoke-0"
      + reverse_lookup   = false
      + terraform_labels = {
          + "goog-terraform-provisioned" = "true"
        }
      + visibility       = "private"

      + cloud_logging_config {
          + enable_logging = false
        }

      + dnssec_config (known after apply)

      + peering_config (known after apply)

      + private_visibility_config (known after apply)
    }

  # module.prod-dns-priv-example.google_dns_managed_zone.dns_managed_zone[0] will be created
  + resource "google_dns_managed_zone" "dns_managed_zone" {
      + creation_time    = (known after apply)
      + description      = "Terraform managed."
      + dns_name         = "prod.gcp.example.com."
      + effective_labels = {
          + "goog-terraform-provisioned" = "true"
        }
      + force_destroy    = false
      + id               = (known after apply)
      + managed_zone_id  = (known after apply)
      + name             = "prod-gcp-example-com"
      + name_servers     = (known after apply)
      + project          = "jpl-prod-net-spoke-0"
      + reverse_lookup   = false
      + terraform_labels = {
          + "goog-terraform-provisioned" = "true"
        }
      + visibility       = "private"

      + cloud_logging_config {
          + enable_logging = false
        }

      + dnssec_config (known after apply)

      + private_visibility_config (known after apply)
    }

  # module.prod-dns-priv-example.google_dns_record_set.dns_record_set["A localhost"] will be created
  + resource "google_dns_record_set" "dns_record_set" {
      + id           = (known after apply)
      + managed_zone = "prod-gcp-example-com"
      + name         = "localhost.prod.gcp.example.com."
      + project      = "jpl-prod-net-spoke-0"
      + rrdatas      = [
          + "127.0.0.1",
        ]
      + ttl          = 300
      + type         = "A"
    }

  # module.prod-spoke-firewall[0].google_compute_firewall.custom-rules["ingress-default-deny"] will be created
  + resource "google_compute_firewall" "custom-rules" {
      + creation_timestamp = (known after apply)
      + description        = "Deny and log any unmatched ingress traffic."
      + destination_ranges = (known after apply)
      + direction          = "INGRESS"
      + disabled           = false
      + enable_logging     = (known after apply)
      + id                 = (known after apply)
      + name               = "ingress-default-deny"
      + network            = "prod-spoke-0"
      + priority           = 65535
      + project            = "jpl-prod-net-spoke-0"
      + self_link          = (known after apply)
      + source_ranges      = [
          + "0.0.0.0/0",
        ]

      + deny {
          + ports    = []
          + protocol = "all"
        }

      + log_config {
          + metadata = "EXCLUDE_ALL_METADATA"
        }
    }

  # module.prod-spoke-project.google_compute_shared_vpc_host_project.shared_vpc_host[0] will be created
  + resource "google_compute_shared_vpc_host_project" "shared_vpc_host" {
      + id      = (known after apply)
      + project = "jpl-prod-net-spoke-0"
    }

  # module.prod-spoke-project.google_monitoring_monitored_project.primary["jpl-prod-net-landing-0"] will be created
  + resource "google_monitoring_monitored_project" "primary" {
      + create_time   = (known after apply)
      + id            = (known after apply)
      + metrics_scope = "jpl-prod-net-landing-0"
      + name          = "jpl-prod-net-spoke-0"
    }

  # module.prod-spoke-project.google_project.project[0] will be created
  + resource "google_project" "project" {
      + auto_create_network = false
      + billing_account     = "0189FA-E139FD-136A58"
      + deletion_policy     = "DELETE"
      + effective_labels    = {
          + "goog-terraform-provisioned" = "true"
        }
      + folder_id           = "260455359833"
      + id                  = (known after apply)
      + name                = "jpl-prod-net-spoke-0"
      + number              = (known after apply)
      + project_id          = "jpl-prod-net-spoke-0"
      + terraform_labels    = {
          + "goog-terraform-provisioned" = "true"
        }
    }

  # module.prod-spoke-project.google_project_iam_binding.authoritative["organizations/890114964408/roles/projectIamViewer"] will be created
  + resource "google_project_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + project = "jpl-prod-net-spoke-0"
      + role    = "organizations/890114964408/roles/projectIamViewer"
    }

  # module.prod-spoke-project.google_project_iam_member.service_agents["compute-system"] will be created
  + resource "google_project_iam_member" "service_agents" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-prod-net-spoke-0"
      + role    = "roles/compute.serviceAgent"
    }

  # module.prod-spoke-project.google_project_iam_member.service_agents["container-engine-robot"] will be created
  + resource "google_project_iam_member" "service_agents" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-prod-net-spoke-0"
      + role    = "roles/container.serviceAgent"
    }

  # module.prod-spoke-project.google_project_iam_member.service_agents["dns"] will be created
  + resource "google_project_iam_member" "service_agents" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-prod-net-spoke-0"
      + role    = "roles/dns.serviceAgent"
    }

  # module.prod-spoke-project.google_project_iam_member.service_agents["gkenode"] will be created
  + resource "google_project_iam_member" "service_agents" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-prod-net-spoke-0"
      + role    = "roles/container.defaultNodeServiceAgent"
    }

  # module.prod-spoke-project.google_project_iam_member.service_agents["networkmanagement"] will be created
  + resource "google_project_iam_member" "service_agents" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-prod-net-spoke-0"
      + role    = "roles/networkmanagement.serviceAgent"
    }

  # module.prod-spoke-project.google_project_iam_member.service_agents["service-networking"] will be created
  + resource "google_project_iam_member" "service_agents" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-prod-net-spoke-0"
      + role    = "roles/servicenetworking.serviceAgent"
    }

  # module.prod-spoke-project.google_project_iam_member.service_agents["vmwareengine"] will be created
  + resource "google_project_iam_member" "service_agents" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-prod-net-spoke-0"
      + role    = "roles/vmwareengine.serviceAgent"
    }

  # module.prod-spoke-project.google_project_iam_member.service_agents["vpcaccess"] will be created
  + resource "google_project_iam_member" "service_agents" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-prod-net-spoke-0"
      + role    = "roles/vpcaccess.serviceAgent"
    }

  # module.prod-spoke-project.google_project_service.project_services["compute.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-prod-net-spoke-0"
      + service                    = "compute.googleapis.com"
    }

  # module.prod-spoke-project.google_project_service.project_services["container.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-prod-net-spoke-0"
      + service                    = "container.googleapis.com"
    }

  # module.prod-spoke-project.google_project_service.project_services["dns.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-prod-net-spoke-0"
      + service                    = "dns.googleapis.com"
    }

  # module.prod-spoke-project.google_project_service.project_services["iap.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-prod-net-spoke-0"
      + service                    = "iap.googleapis.com"
    }

  # module.prod-spoke-project.google_project_service.project_services["networkmanagement.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-prod-net-spoke-0"
      + service                    = "networkmanagement.googleapis.com"
    }

  # module.prod-spoke-project.google_project_service.project_services["networksecurity.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-prod-net-spoke-0"
      + service                    = "networksecurity.googleapis.com"
    }

  # module.prod-spoke-project.google_project_service.project_services["servicenetworking.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-prod-net-spoke-0"
      + service                    = "servicenetworking.googleapis.com"
    }

  # module.prod-spoke-project.google_project_service.project_services["stackdriver.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-prod-net-spoke-0"
      + service                    = "stackdriver.googleapis.com"
    }

  # module.prod-spoke-project.google_project_service.project_services["vmwareengine.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-prod-net-spoke-0"
      + service                    = "vmwareengine.googleapis.com"
    }

  # module.prod-spoke-project.google_project_service.project_services["vpcaccess.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-prod-net-spoke-0"
      + service                    = "vpcaccess.googleapis.com"
    }

  # module.prod-spoke-project.google_project_service_identity.default["container.googleapis.com"] will be created
  + resource "google_project_service_identity" "default" {
      + email   = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-prod-net-spoke-0"
      + service = "container.googleapis.com"
    }

  # module.prod-spoke-project.google_project_service_identity.default["dns.googleapis.com"] will be created
  + resource "google_project_service_identity" "default" {
      + email   = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-prod-net-spoke-0"
      + service = "dns.googleapis.com"
    }

  # module.prod-spoke-project.google_project_service_identity.default["iap.googleapis.com"] will be created
  + resource "google_project_service_identity" "default" {
      + email   = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-prod-net-spoke-0"
      + service = "iap.googleapis.com"
    }

  # module.prod-spoke-project.google_project_service_identity.default["networkmanagement.googleapis.com"] will be created
  + resource "google_project_service_identity" "default" {
      + email   = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-prod-net-spoke-0"
      + service = "networkmanagement.googleapis.com"
    }

  # module.prod-spoke-project.google_project_service_identity.default["networksecurity.googleapis.com"] will be created
  + resource "google_project_service_identity" "default" {
      + email   = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-prod-net-spoke-0"
      + service = "networksecurity.googleapis.com"
    }

  # module.prod-spoke-project.google_project_service_identity.default["servicenetworking.googleapis.com"] will be created
  + resource "google_project_service_identity" "default" {
      + email   = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-prod-net-spoke-0"
      + service = "servicenetworking.googleapis.com"
    }

  # module.prod-spoke-project.google_project_service_identity.default["vmwareengine.googleapis.com"] will be created
  + resource "google_project_service_identity" "default" {
      + email   = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-prod-net-spoke-0"
      + service = "vmwareengine.googleapis.com"
    }

  # module.prod-spoke-project.google_project_service_identity.default["vpcaccess.googleapis.com"] will be created
  + resource "google_project_service_identity" "default" {
      + email   = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-prod-net-spoke-0"
      + service = "vpcaccess.googleapis.com"
    }

  # module.prod-spoke-project.google_tags_tag_binding.binding["environment"] will be created
  + resource "google_tags_tag_binding" "binding" {
      + id        = (known after apply)
      + name      = (known after apply)
      + parent    = (known after apply)
      + tag_value = "tagValues/281480660532594"
    }

  # module.prod-spoke-vpc.google_compute_network.network[0] will be created
  + resource "google_compute_network" "network" {
      + auto_create_subnetworks                   = false
      + bgp_always_compare_med                    = (known after apply)
      + bgp_best_path_selection_mode              = (known after apply)
      + bgp_inter_region_cost                     = (known after apply)
      + delete_default_routes_on_create           = true
      + description                               = "Terraform-managed."
      + gateway_ipv4                              = (known after apply)
      + id                                        = (known after apply)
      + internal_ipv6_range                       = (known after apply)
      + mtu                                       = 1500
      + name                                      = "prod-spoke-0"
      + network_firewall_policy_enforcement_order = "AFTER_CLASSIC_FIREWALL"
      + network_id                                = (known after apply)
      + numeric_id                                = (known after apply)
      + project                                   = "jpl-prod-net-spoke-0"
      + routing_mode                              = "GLOBAL"
      + self_link                                 = (known after apply)
    }

  # module.prod-spoke-vpc.google_compute_route.gateway["default"] will be created
  + resource "google_compute_route" "gateway" {
      + as_paths                   = (known after apply)
      + creation_timestamp         = (known after apply)
      + description                = "Terraform-managed."
      + dest_range                 = "0.0.0.0/0"
      + id                         = (known after apply)
      + name                       = "prod-spoke-0-default"
      + network                    = "prod-spoke-0"
      + next_hop_gateway           = "default-internet-gateway"
      + next_hop_hub               = (known after apply)
      + next_hop_instance_zone     = (known after apply)
      + next_hop_inter_region_cost = (known after apply)
      + next_hop_ip                = (known after apply)
      + next_hop_med               = (known after apply)
      + next_hop_network           = (known after apply)
      + next_hop_origin            = (known after apply)
      + next_hop_peering           = (known after apply)
      + priority                   = 1000
      + project                    = "jpl-prod-net-spoke-0"
      + route_status               = (known after apply)
      + route_type                 = (known after apply)
      + self_link                  = (known after apply)
      + warnings                   = (known after apply)
    }

  # module.prod-spoke-vpc.google_compute_route.gateway["directpath-googleapis"] will be created
  + resource "google_compute_route" "gateway" {
      + as_paths                   = (known after apply)
      + creation_timestamp         = (known after apply)
      + description                = "Terraform-managed."
      + dest_range                 = "34.126.0.0/18"
      + id                         = (known after apply)
      + name                       = "prod-spoke-0-directpath-googleapis"
      + network                    = "prod-spoke-0"
      + next_hop_gateway           = "default-internet-gateway"
      + next_hop_hub               = (known after apply)
      + next_hop_instance_zone     = (known after apply)
      + next_hop_inter_region_cost = (known after apply)
      + next_hop_ip                = (known after apply)
      + next_hop_med               = (known after apply)
      + next_hop_network           = (known after apply)
      + next_hop_origin            = (known after apply)
      + next_hop_peering           = (known after apply)
      + priority                   = 1000
      + project                    = "jpl-prod-net-spoke-0"
      + route_status               = (known after apply)
      + route_type                 = (known after apply)
      + self_link                  = (known after apply)
      + warnings                   = (known after apply)
    }

  # module.prod-spoke-vpc.google_compute_route.gateway["private-googleapis"] will be created
  + resource "google_compute_route" "gateway" {
      + as_paths                   = (known after apply)
      + creation_timestamp         = (known after apply)
      + description                = "Terraform-managed."
      + dest_range                 = "199.36.153.8/30"
      + id                         = (known after apply)
      + name                       = "prod-spoke-0-private-googleapis"
      + network                    = "prod-spoke-0"
      + next_hop_gateway           = "default-internet-gateway"
      + next_hop_hub               = (known after apply)
      + next_hop_instance_zone     = (known after apply)
      + next_hop_inter_region_cost = (known after apply)
      + next_hop_ip                = (known after apply)
      + next_hop_med               = (known after apply)
      + next_hop_network           = (known after apply)
      + next_hop_origin            = (known after apply)
      + next_hop_peering           = (known after apply)
      + priority                   = 1000
      + project                    = "jpl-prod-net-spoke-0"
      + route_status               = (known after apply)
      + route_type                 = (known after apply)
      + self_link                  = (known after apply)
      + warnings                   = (known after apply)
    }

  # module.prod-spoke-vpc.google_compute_route.gateway["restricted-googleapis"] will be created
  + resource "google_compute_route" "gateway" {
      + as_paths                   = (known after apply)
      + creation_timestamp         = (known after apply)
      + description                = "Terraform-managed."
      + dest_range                 = "199.36.153.4/30"
      + id                         = (known after apply)
      + name                       = "prod-spoke-0-restricted-googleapis"
      + network                    = "prod-spoke-0"
      + next_hop_gateway           = "default-internet-gateway"
      + next_hop_hub               = (known after apply)
      + next_hop_instance_zone     = (known after apply)
      + next_hop_inter_region_cost = (known after apply)
      + next_hop_ip                = (known after apply)
      + next_hop_med               = (known after apply)
      + next_hop_network           = (known after apply)
      + next_hop_origin            = (known after apply)
      + next_hop_peering           = (known after apply)
      + priority                   = 1000
      + project                    = "jpl-prod-net-spoke-0"
      + route_status               = (known after apply)
      + route_type                 = (known after apply)
      + self_link                  = (known after apply)
      + warnings                   = (known after apply)
    }

  # module.prod-spoke-vpc.google_compute_subnetwork.subnetwork["southamerica-east1/rd-gcp-prod-net-spoke-0"] will be created
  + resource "google_compute_subnetwork" "subnetwork" {
      + allow_subnet_cidr_routes_overlap = (known after apply)
      + creation_timestamp               = (known after apply)
      + description                      = "Default primary-region subnet for prod"
      + enable_flow_logs                 = (known after apply)
      + external_ipv6_prefix             = (known after apply)
      + fingerprint                      = (known after apply)
      + gateway_address                  = (known after apply)
      + id                               = (known after apply)
      + internal_ipv6_prefix             = (known after apply)
      + ip_cidr_range                    = "10.239.0.0/18"
      + ipv6_cidr_range                  = (known after apply)
      + ipv6_gce_endpoint                = (known after apply)
      + name                             = "rd-gcp-prod-net-spoke-0"
      + network                          = "prod-spoke-0"
      + private_ip_google_access         = true
      + private_ipv6_google_access       = (known after apply)
      + project                          = "jpl-prod-net-spoke-0"
      + purpose                          = (known after apply)
      + region                           = "southamerica-east1"
      + self_link                        = (known after apply)
      + send_secondary_ip_range_if_empty = true
      + stack_type                       = (known after apply)
      + state                            = (known after apply)
      + subnetwork_id                    = (known after apply)

      + secondary_ip_range (known after apply)
    }

  # module.prod-spoke-vpc.google_dns_policy.default[0] will be created
  + resource "google_dns_policy" "default" {
      + description               = "Managed by Terraform"
      + enable_inbound_forwarding = true
      + enable_logging            = true
      + id                        = (known after apply)
      + name                      = "prod-spoke-0"
      + project                   = "jpl-prod-net-spoke-0"

      + networks {
          + network_url = (known after apply)
        }
    }

  # module.qa-spoke-project.google_compute_shared_vpc_host_project.shared_vpc_host[0] will be created
  + resource "google_compute_shared_vpc_host_project" "shared_vpc_host" {
      + id      = (known after apply)
      + project = "jpl-qa-net-spoke-0"
    }

  # module.qa-spoke-project.google_monitoring_monitored_project.primary["jpl-prod-net-landing-0"] will be created
  + resource "google_monitoring_monitored_project" "primary" {
      + create_time   = (known after apply)
      + id            = (known after apply)
      + metrics_scope = "jpl-prod-net-landing-0"
      + name          = "jpl-qa-net-spoke-0"
    }

  # module.qa-spoke-project.google_project.project[0] will be created
  + resource "google_project" "project" {
      + auto_create_network = false
      + billing_account     = "0189FA-E139FD-136A58"
      + deletion_policy     = "DELETE"
      + effective_labels    = {
          + "goog-terraform-provisioned" = "true"
        }
      + folder_id           = "260455359833"
      + id                  = (known after apply)
      + name                = "jpl-qa-net-spoke-0"
      + number              = (known after apply)
      + project_id          = "jpl-qa-net-spoke-0"
      + terraform_labels    = {
          + "goog-terraform-provisioned" = "true"
        }
    }

  # module.qa-spoke-project.google_project_iam_binding.authoritative["organizations/890114964408/roles/projectIamViewer"] will be created
  + resource "google_project_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + project = "jpl-qa-net-spoke-0"
      + role    = "organizations/890114964408/roles/projectIamViewer"
    }

  # module.qa-spoke-project.google_project_iam_member.service_agents["compute-system"] will be created
  + resource "google_project_iam_member" "service_agents" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-qa-net-spoke-0"
      + role    = "roles/compute.serviceAgent"
    }

  # module.qa-spoke-project.google_project_iam_member.service_agents["container-engine-robot"] will be created
  + resource "google_project_iam_member" "service_agents" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-qa-net-spoke-0"
      + role    = "roles/container.serviceAgent"
    }

  # module.qa-spoke-project.google_project_iam_member.service_agents["dns"] will be created
  + resource "google_project_iam_member" "service_agents" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-qa-net-spoke-0"
      + role    = "roles/dns.serviceAgent"
    }

  # module.qa-spoke-project.google_project_iam_member.service_agents["gkenode"] will be created
  + resource "google_project_iam_member" "service_agents" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-qa-net-spoke-0"
      + role    = "roles/container.defaultNodeServiceAgent"
    }

  # module.qa-spoke-project.google_project_iam_member.service_agents["networkmanagement"] will be created
  + resource "google_project_iam_member" "service_agents" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-qa-net-spoke-0"
      + role    = "roles/networkmanagement.serviceAgent"
    }

  # module.qa-spoke-project.google_project_iam_member.service_agents["service-networking"] will be created
  + resource "google_project_iam_member" "service_agents" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-qa-net-spoke-0"
      + role    = "roles/servicenetworking.serviceAgent"
    }

  # module.qa-spoke-project.google_project_iam_member.service_agents["vmwareengine"] will be created
  + resource "google_project_iam_member" "service_agents" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-qa-net-spoke-0"
      + role    = "roles/vmwareengine.serviceAgent"
    }

  # module.qa-spoke-project.google_project_iam_member.service_agents["vpcaccess"] will be created
  + resource "google_project_iam_member" "service_agents" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-qa-net-spoke-0"
      + role    = "roles/vpcaccess.serviceAgent"
    }

  # module.qa-spoke-project.google_project_service.project_services["compute.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-qa-net-spoke-0"
      + service                    = "compute.googleapis.com"
    }

  # module.qa-spoke-project.google_project_service.project_services["container.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-qa-net-spoke-0"
      + service                    = "container.googleapis.com"
    }

  # module.qa-spoke-project.google_project_service.project_services["dns.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-qa-net-spoke-0"
      + service                    = "dns.googleapis.com"
    }

  # module.qa-spoke-project.google_project_service.project_services["iap.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-qa-net-spoke-0"
      + service                    = "iap.googleapis.com"
    }

  # module.qa-spoke-project.google_project_service.project_services["networkmanagement.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-qa-net-spoke-0"
      + service                    = "networkmanagement.googleapis.com"
    }

  # module.qa-spoke-project.google_project_service.project_services["networksecurity.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-qa-net-spoke-0"
      + service                    = "networksecurity.googleapis.com"
    }

  # module.qa-spoke-project.google_project_service.project_services["servicenetworking.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-qa-net-spoke-0"
      + service                    = "servicenetworking.googleapis.com"
    }

  # module.qa-spoke-project.google_project_service.project_services["stackdriver.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-qa-net-spoke-0"
      + service                    = "stackdriver.googleapis.com"
    }

  # module.qa-spoke-project.google_project_service.project_services["vmwareengine.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-qa-net-spoke-0"
      + service                    = "vmwareengine.googleapis.com"
    }

  # module.qa-spoke-project.google_project_service.project_services["vpcaccess.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-qa-net-spoke-0"
      + service                    = "vpcaccess.googleapis.com"
    }

  # module.qa-spoke-project.google_project_service_identity.default["container.googleapis.com"] will be created
  + resource "google_project_service_identity" "default" {
      + email   = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-qa-net-spoke-0"
      + service = "container.googleapis.com"
    }

  # module.qa-spoke-project.google_project_service_identity.default["dns.googleapis.com"] will be created
  + resource "google_project_service_identity" "default" {
      + email   = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-qa-net-spoke-0"
      + service = "dns.googleapis.com"
    }

  # module.qa-spoke-project.google_project_service_identity.default["iap.googleapis.com"] will be created
  + resource "google_project_service_identity" "default" {
      + email   = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-qa-net-spoke-0"
      + service = "iap.googleapis.com"
    }

  # module.qa-spoke-project.google_project_service_identity.default["networkmanagement.googleapis.com"] will be created
  + resource "google_project_service_identity" "default" {
      + email   = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-qa-net-spoke-0"
      + service = "networkmanagement.googleapis.com"
    }

  # module.qa-spoke-project.google_project_service_identity.default["networksecurity.googleapis.com"] will be created
  + resource "google_project_service_identity" "default" {
      + email   = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-qa-net-spoke-0"
      + service = "networksecurity.googleapis.com"
    }

  # module.qa-spoke-project.google_project_service_identity.default["servicenetworking.googleapis.com"] will be created
  + resource "google_project_service_identity" "default" {
      + email   = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-qa-net-spoke-0"
      + service = "servicenetworking.googleapis.com"
    }

  # module.qa-spoke-project.google_project_service_identity.default["vmwareengine.googleapis.com"] will be created
  + resource "google_project_service_identity" "default" {
      + email   = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-qa-net-spoke-0"
      + service = "vmwareengine.googleapis.com"
    }

  # module.qa-spoke-project.google_project_service_identity.default["vpcaccess.googleapis.com"] will be created
  + resource "google_project_service_identity" "default" {
      + email   = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-qa-net-spoke-0"
      + service = "vpcaccess.googleapis.com"
    }

  # module.qa-spoke-vpc.google_compute_network.network[0] will be created
  + resource "google_compute_network" "network" {
      + auto_create_subnetworks                   = false
      + bgp_always_compare_med                    = (known after apply)
      + bgp_best_path_selection_mode              = (known after apply)
      + bgp_inter_region_cost                     = (known after apply)
      + delete_default_routes_on_create           = true
      + description                               = "Terraform-managed."
      + gateway_ipv4                              = (known after apply)
      + id                                        = (known after apply)
      + internal_ipv6_range                       = (known after apply)
      + mtu                                       = 1500
      + name                                      = "qa-spoke-0"
      + network_firewall_policy_enforcement_order = "AFTER_CLASSIC_FIREWALL"
      + network_id                                = (known after apply)
      + numeric_id                                = (known after apply)
      + project                                   = "jpl-qa-net-spoke-0"
      + routing_mode                              = "GLOBAL"
      + self_link                                 = (known after apply)
    }

  # module.qa-spoke-vpc.google_compute_route.gateway["default"] will be created
  + resource "google_compute_route" "gateway" {
      + as_paths                   = (known after apply)
      + creation_timestamp         = (known after apply)
      + description                = "Terraform-managed."
      + dest_range                 = "0.0.0.0/0"
      + id                         = (known after apply)
      + name                       = "qa-spoke-0-default"
      + network                    = "qa-spoke-0"
      + next_hop_gateway           = "default-internet-gateway"
      + next_hop_hub               = (known after apply)
      + next_hop_instance_zone     = (known after apply)
      + next_hop_inter_region_cost = (known after apply)
      + next_hop_ip                = (known after apply)
      + next_hop_med               = (known after apply)
      + next_hop_network           = (known after apply)
      + next_hop_origin            = (known after apply)
      + next_hop_peering           = (known after apply)
      + priority                   = 1000
      + project                    = "jpl-qa-net-spoke-0"
      + route_status               = (known after apply)
      + route_type                 = (known after apply)
      + self_link                  = (known after apply)
      + warnings                   = (known after apply)
    }

  # module.qa-spoke-vpc.google_compute_route.gateway["directpath-googleapis"] will be created
  + resource "google_compute_route" "gateway" {
      + as_paths                   = (known after apply)
      + creation_timestamp         = (known after apply)
      + description                = "Terraform-managed."
      + dest_range                 = "34.126.0.0/18"
      + id                         = (known after apply)
      + name                       = "qa-spoke-0-directpath-googleapis"
      + network                    = "qa-spoke-0"
      + next_hop_gateway           = "default-internet-gateway"
      + next_hop_hub               = (known after apply)
      + next_hop_instance_zone     = (known after apply)
      + next_hop_inter_region_cost = (known after apply)
      + next_hop_ip                = (known after apply)
      + next_hop_med               = (known after apply)
      + next_hop_network           = (known after apply)
      + next_hop_origin            = (known after apply)
      + next_hop_peering           = (known after apply)
      + priority                   = 1000
      + project                    = "jpl-qa-net-spoke-0"
      + route_status               = (known after apply)
      + route_type                 = (known after apply)
      + self_link                  = (known after apply)
      + warnings                   = (known after apply)
    }

  # module.qa-spoke-vpc.google_compute_route.gateway["private-googleapis"] will be created
  + resource "google_compute_route" "gateway" {
      + as_paths                   = (known after apply)
      + creation_timestamp         = (known after apply)
      + description                = "Terraform-managed."
      + dest_range                 = "199.36.153.8/30"
      + id                         = (known after apply)
      + name                       = "qa-spoke-0-private-googleapis"
      + network                    = "qa-spoke-0"
      + next_hop_gateway           = "default-internet-gateway"
      + next_hop_hub               = (known after apply)
      + next_hop_instance_zone     = (known after apply)
      + next_hop_inter_region_cost = (known after apply)
      + next_hop_ip                = (known after apply)
      + next_hop_med               = (known after apply)
      + next_hop_network           = (known after apply)
      + next_hop_origin            = (known after apply)
      + next_hop_peering           = (known after apply)
      + priority                   = 1000
      + project                    = "jpl-qa-net-spoke-0"
      + route_status               = (known after apply)
      + route_type                 = (known after apply)
      + self_link                  = (known after apply)
      + warnings                   = (known after apply)
    }

  # module.qa-spoke-vpc.google_compute_route.gateway["restricted-googleapis"] will be created
  + resource "google_compute_route" "gateway" {
      + as_paths                   = (known after apply)
      + creation_timestamp         = (known after apply)
      + description                = "Terraform-managed."
      + dest_range                 = "199.36.153.4/30"
      + id                         = (known after apply)
      + name                       = "qa-spoke-0-restricted-googleapis"
      + network                    = "qa-spoke-0"
      + next_hop_gateway           = "default-internet-gateway"
      + next_hop_hub               = (known after apply)
      + next_hop_instance_zone     = (known after apply)
      + next_hop_inter_region_cost = (known after apply)
      + next_hop_ip                = (known after apply)
      + next_hop_med               = (known after apply)
      + next_hop_network           = (known after apply)
      + next_hop_origin            = (known after apply)
      + next_hop_peering           = (known after apply)
      + priority                   = 1000
      + project                    = "jpl-qa-net-spoke-0"
      + route_status               = (known after apply)
      + route_type                 = (known after apply)
      + self_link                  = (known after apply)
      + warnings                   = (known after apply)
    }

  # module.qa-spoke-vpc.google_compute_subnetwork.subnetwork["southamerica-east1/rd-gcp-qa-net-spoke-0"] will be created
  + resource "google_compute_subnetwork" "subnetwork" {
      + allow_subnet_cidr_routes_overlap = (known after apply)
      + creation_timestamp               = (known after apply)
      + description                      = "Default primary-region subnet for QA"
      + enable_flow_logs                 = (known after apply)
      + external_ipv6_prefix             = (known after apply)
      + fingerprint                      = (known after apply)
      + gateway_address                  = (known after apply)
      + id                               = (known after apply)
      + internal_ipv6_prefix             = (known after apply)
      + ip_cidr_range                    = "10.239.128.0/18"
      + ipv6_cidr_range                  = (known after apply)
      + ipv6_gce_endpoint                = (known after apply)
      + name                             = "rd-gcp-qa-net-spoke-0"
      + network                          = "qa-spoke-0"
      + private_ip_google_access         = true
      + private_ipv6_google_access       = (known after apply)
      + project                          = "jpl-qa-net-spoke-0"
      + purpose                          = (known after apply)
      + region                           = "southamerica-east1"
      + self_link                        = (known after apply)
      + send_secondary_ip_range_if_empty = true
      + stack_type                       = (known after apply)
      + state                            = (known after apply)
      + subnetwork_id                    = (known after apply)

      + secondary_ip_range (known after apply)
    }

  # module.qa-spoke-vpc.google_dns_policy.default[0] will be created
  + resource "google_dns_policy" "default" {
      + description               = "Managed by Terraform"
      + enable_inbound_forwarding = true
      + enable_logging            = true
      + id                        = (known after apply)
      + name                      = "qa-spoke-0"
      + project                   = "jpl-qa-net-spoke-0"

      + networks {
          + network_url = (known after apply)
        }
    }

  # module.stg-spoke-project.google_compute_shared_vpc_host_project.shared_vpc_host[0] will be created
  + resource "google_compute_shared_vpc_host_project" "shared_vpc_host" {
      + id      = (known after apply)
      + project = "jpl-stg-net-spoke-0"
    }

  # module.stg-spoke-project.google_monitoring_monitored_project.primary["jpl-prod-net-landing-0"] will be created
  + resource "google_monitoring_monitored_project" "primary" {
      + create_time   = (known after apply)
      + id            = (known after apply)
      + metrics_scope = "jpl-prod-net-landing-0"
      + name          = "jpl-stg-net-spoke-0"
    }

  # module.stg-spoke-project.google_project.project[0] will be created
  + resource "google_project" "project" {
      + auto_create_network = false
      + billing_account     = "0189FA-E139FD-136A58"
      + deletion_policy     = "DELETE"
      + effective_labels    = {
          + "goog-terraform-provisioned" = "true"
        }
      + folder_id           = "260455359833"
      + id                  = (known after apply)
      + name                = "jpl-stg-net-spoke-0"
      + number              = (known after apply)
      + project_id          = "jpl-stg-net-spoke-0"
      + terraform_labels    = {
          + "goog-terraform-provisioned" = "true"
        }
    }

  # module.stg-spoke-project.google_project_iam_binding.authoritative["organizations/890114964408/roles/projectIamViewer"] will be created
  + resource "google_project_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + project = "jpl-stg-net-spoke-0"
      + role    = "organizations/890114964408/roles/projectIamViewer"
    }

  # module.stg-spoke-project.google_project_iam_member.service_agents["compute-system"] will be created
  + resource "google_project_iam_member" "service_agents" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-stg-net-spoke-0"
      + role    = "roles/compute.serviceAgent"
    }

  # module.stg-spoke-project.google_project_iam_member.service_agents["container-engine-robot"] will be created
  + resource "google_project_iam_member" "service_agents" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-stg-net-spoke-0"
      + role    = "roles/container.serviceAgent"
    }

  # module.stg-spoke-project.google_project_iam_member.service_agents["dns"] will be created
  + resource "google_project_iam_member" "service_agents" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-stg-net-spoke-0"
      + role    = "roles/dns.serviceAgent"
    }

  # module.stg-spoke-project.google_project_iam_member.service_agents["gkenode"] will be created
  + resource "google_project_iam_member" "service_agents" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-stg-net-spoke-0"
      + role    = "roles/container.defaultNodeServiceAgent"
    }

  # module.stg-spoke-project.google_project_iam_member.service_agents["networkmanagement"] will be created
  + resource "google_project_iam_member" "service_agents" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-stg-net-spoke-0"
      + role    = "roles/networkmanagement.serviceAgent"
    }

  # module.stg-spoke-project.google_project_iam_member.service_agents["service-networking"] will be created
  + resource "google_project_iam_member" "service_agents" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-stg-net-spoke-0"
      + role    = "roles/servicenetworking.serviceAgent"
    }

  # module.stg-spoke-project.google_project_iam_member.service_agents["vmwareengine"] will be created
  + resource "google_project_iam_member" "service_agents" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-stg-net-spoke-0"
      + role    = "roles/vmwareengine.serviceAgent"
    }

  # module.stg-spoke-project.google_project_iam_member.service_agents["vpcaccess"] will be created
  + resource "google_project_iam_member" "service_agents" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-stg-net-spoke-0"
      + role    = "roles/vpcaccess.serviceAgent"
    }

  # module.stg-spoke-project.google_project_service.project_services["compute.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-stg-net-spoke-0"
      + service                    = "compute.googleapis.com"
    }

  # module.stg-spoke-project.google_project_service.project_services["container.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-stg-net-spoke-0"
      + service                    = "container.googleapis.com"
    }

  # module.stg-spoke-project.google_project_service.project_services["dns.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-stg-net-spoke-0"
      + service                    = "dns.googleapis.com"
    }

  # module.stg-spoke-project.google_project_service.project_services["iap.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-stg-net-spoke-0"
      + service                    = "iap.googleapis.com"
    }

  # module.stg-spoke-project.google_project_service.project_services["networkmanagement.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-stg-net-spoke-0"
      + service                    = "networkmanagement.googleapis.com"
    }

  # module.stg-spoke-project.google_project_service.project_services["networksecurity.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-stg-net-spoke-0"
      + service                    = "networksecurity.googleapis.com"
    }

  # module.stg-spoke-project.google_project_service.project_services["servicenetworking.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-stg-net-spoke-0"
      + service                    = "servicenetworking.googleapis.com"
    }

  # module.stg-spoke-project.google_project_service.project_services["stackdriver.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-stg-net-spoke-0"
      + service                    = "stackdriver.googleapis.com"
    }

  # module.stg-spoke-project.google_project_service.project_services["vmwareengine.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-stg-net-spoke-0"
      + service                    = "vmwareengine.googleapis.com"
    }

  # module.stg-spoke-project.google_project_service.project_services["vpcaccess.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "jpl-stg-net-spoke-0"
      + service                    = "vpcaccess.googleapis.com"
    }

  # module.stg-spoke-project.google_project_service_identity.default["container.googleapis.com"] will be created
  + resource "google_project_service_identity" "default" {
      + email   = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-stg-net-spoke-0"
      + service = "container.googleapis.com"
    }

  # module.stg-spoke-project.google_project_service_identity.default["dns.googleapis.com"] will be created
  + resource "google_project_service_identity" "default" {
      + email   = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-stg-net-spoke-0"
      + service = "dns.googleapis.com"
    }

  # module.stg-spoke-project.google_project_service_identity.default["iap.googleapis.com"] will be created
  + resource "google_project_service_identity" "default" {
      + email   = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-stg-net-spoke-0"
      + service = "iap.googleapis.com"
    }

  # module.stg-spoke-project.google_project_service_identity.default["networkmanagement.googleapis.com"] will be created
  + resource "google_project_service_identity" "default" {
      + email   = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-stg-net-spoke-0"
      + service = "networkmanagement.googleapis.com"
    }

  # module.stg-spoke-project.google_project_service_identity.default["networksecurity.googleapis.com"] will be created
  + resource "google_project_service_identity" "default" {
      + email   = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-stg-net-spoke-0"
      + service = "networksecurity.googleapis.com"
    }

  # module.stg-spoke-project.google_project_service_identity.default["servicenetworking.googleapis.com"] will be created
  + resource "google_project_service_identity" "default" {
      + email   = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-stg-net-spoke-0"
      + service = "servicenetworking.googleapis.com"
    }

  # module.stg-spoke-project.google_project_service_identity.default["vmwareengine.googleapis.com"] will be created
  + resource "google_project_service_identity" "default" {
      + email   = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-stg-net-spoke-0"
      + service = "vmwareengine.googleapis.com"
    }

  # module.stg-spoke-project.google_project_service_identity.default["vpcaccess.googleapis.com"] will be created
  + resource "google_project_service_identity" "default" {
      + email   = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "jpl-stg-net-spoke-0"
      + service = "vpcaccess.googleapis.com"
    }

  # module.stg-spoke-vpc.google_compute_network.network[0] will be created
  + resource "google_compute_network" "network" {
      + auto_create_subnetworks                   = false
      + bgp_always_compare_med                    = (known after apply)
      + bgp_best_path_selection_mode              = (known after apply)
      + bgp_inter_region_cost                     = (known after apply)
      + delete_default_routes_on_create           = true
      + description                               = "Terraform-managed."
      + gateway_ipv4                              = (known after apply)
      + id                                        = (known after apply)
      + internal_ipv6_range                       = (known after apply)
      + mtu                                       = 1500
      + name                                      = "stg-spoke-0"
      + network_firewall_policy_enforcement_order = "AFTER_CLASSIC_FIREWALL"
      + network_id                                = (known after apply)
      + numeric_id                                = (known after apply)
      + project                                   = "jpl-stg-net-spoke-0"
      + routing_mode                              = "GLOBAL"
      + self_link                                 = (known after apply)
    }

  # module.stg-spoke-vpc.google_compute_route.gateway["default"] will be created
  + resource "google_compute_route" "gateway" {
      + as_paths                   = (known after apply)
      + creation_timestamp         = (known after apply)
      + description                = "Terraform-managed."
      + dest_range                 = "0.0.0.0/0"
      + id                         = (known after apply)
      + name                       = "stg-spoke-0-default"
      + network                    = "stg-spoke-0"
      + next_hop_gateway           = "default-internet-gateway"
      + next_hop_hub               = (known after apply)
      + next_hop_instance_zone     = (known after apply)
      + next_hop_inter_region_cost = (known after apply)
      + next_hop_ip                = (known after apply)
      + next_hop_med               = (known after apply)
      + next_hop_network           = (known after apply)
      + next_hop_origin            = (known after apply)
      + next_hop_peering           = (known after apply)
      + priority                   = 1000
      + project                    = "jpl-stg-net-spoke-0"
      + route_status               = (known after apply)
      + route_type                 = (known after apply)
      + self_link                  = (known after apply)
      + warnings                   = (known after apply)
    }

  # module.stg-spoke-vpc.google_compute_route.gateway["directpath-googleapis"] will be created
  + resource "google_compute_route" "gateway" {
      + as_paths                   = (known after apply)
      + creation_timestamp         = (known after apply)
      + description                = "Terraform-managed."
      + dest_range                 = "34.126.0.0/18"
      + id                         = (known after apply)
      + name                       = "stg-spoke-0-directpath-googleapis"
      + network                    = "stg-spoke-0"
      + next_hop_gateway           = "default-internet-gateway"
      + next_hop_hub               = (known after apply)
      + next_hop_instance_zone     = (known after apply)
      + next_hop_inter_region_cost = (known after apply)
      + next_hop_ip                = (known after apply)
      + next_hop_med               = (known after apply)
      + next_hop_network           = (known after apply)
      + next_hop_origin            = (known after apply)
      + next_hop_peering           = (known after apply)
      + priority                   = 1000
      + project                    = "jpl-stg-net-spoke-0"
      + route_status               = (known after apply)
      + route_type                 = (known after apply)
      + self_link                  = (known after apply)
      + warnings                   = (known after apply)
    }

  # module.stg-spoke-vpc.google_compute_route.gateway["private-googleapis"] will be created
  + resource "google_compute_route" "gateway" {
      + as_paths                   = (known after apply)
      + creation_timestamp         = (known after apply)
      + description                = "Terraform-managed."
      + dest_range                 = "199.36.153.8/30"
      + id                         = (known after apply)
      + name                       = "stg-spoke-0-private-googleapis"
      + network                    = "stg-spoke-0"
      + next_hop_gateway           = "default-internet-gateway"
      + next_hop_hub               = (known after apply)
      + next_hop_instance_zone     = (known after apply)
      + next_hop_inter_region_cost = (known after apply)
      + next_hop_ip                = (known after apply)
      + next_hop_med               = (known after apply)
      + next_hop_network           = (known after apply)
      + next_hop_origin            = (known after apply)
      + next_hop_peering           = (known after apply)
      + priority                   = 1000
      + project                    = "jpl-stg-net-spoke-0"
      + route_status               = (known after apply)
      + route_type                 = (known after apply)
      + self_link                  = (known after apply)
      + warnings                   = (known after apply)
    }

  # module.stg-spoke-vpc.google_compute_route.gateway["restricted-googleapis"] will be created
  + resource "google_compute_route" "gateway" {
      + as_paths                   = (known after apply)
      + creation_timestamp         = (known after apply)
      + description                = "Terraform-managed."
      + dest_range                 = "199.36.153.4/30"
      + id                         = (known after apply)
      + name                       = "stg-spoke-0-restricted-googleapis"
      + network                    = "stg-spoke-0"
      + next_hop_gateway           = "default-internet-gateway"
      + next_hop_hub               = (known after apply)
      + next_hop_instance_zone     = (known after apply)
      + next_hop_inter_region_cost = (known after apply)
      + next_hop_ip                = (known after apply)
      + next_hop_med               = (known after apply)
      + next_hop_network           = (known after apply)
      + next_hop_origin            = (known after apply)
      + next_hop_peering           = (known after apply)
      + priority                   = 1000
      + project                    = "jpl-stg-net-spoke-0"
      + route_status               = (known after apply)
      + route_type                 = (known after apply)
      + self_link                  = (known after apply)
      + warnings                   = (known after apply)
    }

  # module.stg-spoke-vpc.google_compute_subnetwork.subnetwork["southamerica-east1/rd-gcp-stg-net-spoke-0"] will be created
  + resource "google_compute_subnetwork" "subnetwork" {
      + allow_subnet_cidr_routes_overlap = (known after apply)
      + creation_timestamp               = (known after apply)
      + description                      = "Default primary-region subnet for stg"
      + enable_flow_logs                 = (known after apply)
      + external_ipv6_prefix             = (known after apply)
      + fingerprint                      = (known after apply)
      + gateway_address                  = (known after apply)
      + id                               = (known after apply)
      + internal_ipv6_prefix             = (known after apply)
      + ip_cidr_range                    = "10.239.64.0/18"
      + ipv6_cidr_range                  = (known after apply)
      + ipv6_gce_endpoint                = (known after apply)
      + name                             = "rd-gcp-stg-net-spoke-0"
      + network                          = "stg-spoke-0"
      + private_ip_google_access         = true
      + private_ipv6_google_access       = (known after apply)
      + project                          = "jpl-stg-net-spoke-0"
      + purpose                          = (known after apply)
      + region                           = "southamerica-east1"
      + self_link                        = (known after apply)
      + send_secondary_ip_range_if_empty = true
      + stack_type                       = (known after apply)
      + state                            = (known after apply)
      + subnetwork_id                    = (known after apply)

      + secondary_ip_range (known after apply)
    }

  # module.stg-spoke-vpc.google_dns_policy.default[0] will be created
  + resource "google_dns_policy" "default" {
      + description               = "Managed by Terraform"
      + enable_inbound_forwarding = true
      + enable_logging            = true
      + id                        = (known after apply)
      + name                      = "stg-spoke-0"
      + project                   = "jpl-stg-net-spoke-0"

      + networks {
          + network_url = (known after apply)
        }
    }

Plan: 284 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + cloud_dns_inbound_policy = [
      + "10.239.240.2",
    ]
  + host_project_ids         = {
      + dev-spoke-0  = "jpl-dev-net-spoke-0"
      + prod-landing = "jpl-prod-net-landing-0"
      + prod-spoke-0 = "jpl-prod-net-spoke-0"
    }
  + host_project_numbers     = {
      + dev-spoke-0  = (known after apply)
      + prod-landing = (known after apply)
      + prod-spoke-0 = (known after apply)
    }
  + shared_vpc_self_links    = {
      + dev-spoke-0  = (known after apply)
      + prod-landing = (known after apply)
      + prod-spoke-0 = (known after apply)
    }
  + tfvars                   = (sensitive value)

Warning: Value for undeclared variable

The root module does not declare a variable named "locations" but a value was found in file "0-globals.auto.tfvars.json". If you meant to use this value, add a "variable" block to the
configuration.

To silence these warnings, use TF_VAR_... environment variables to provide certain "global" settings to all configurations in your organization. To reduce the verbosity of these warnings, use
the -compact-warnings option.

Warning: Value for undeclared variable

The root module does not declare a variable named "organization" but a value was found in file "0-globals.auto.tfvars.json". If you meant to use this value, add a "variable" block to the
configuration.

To silence these warnings, use TF_VAR_... environment variables to provide certain "global" settings to all configurations in your organization. To reduce the verbosity of these warnings, use
the -compact-warnings option.

Warning: Values for undeclared variables

In addition to the other similar warnings shown, 8 other variable(s) defined without being declared.

─────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
